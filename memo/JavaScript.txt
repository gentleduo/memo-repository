==============================================JavaScript与ECMA、BOM、DOM的关系==============================================
很多时候，我们把ECMA拿来与js表达相同的含义，但实际上，js包含的内容要比ECMA多的多。一个完整的JavaScript应该由下面三个部分构成。

JS核心（ECMA）
从本质上来说，ECMA定义的只是这门语言的基础，在此基础上我们可以构建更完善的脚本。比如我们常见的web浏览器就是ECMA的宿主环境之一，它实现了对ECMA的支持，并且提供了该语言的扩展，方便语言与环境间对接交互，浏览器本身跟ECMA并没有直接依赖关系。
大致来说，ECMA规定了这门语言的下列组成部分：
语法
类型
语句
关键字
保留字
操作符
对象

文档对象模型（DOM）
文档对象模型是针对XML但经过扩展用于html的应用程序编程接口（API）。DOM代表着被加载到浏览器窗口里的当前网页：浏览器向我们提供了当前网页的地图（或者说模型），而我们可以通过js去读取这张地图。
DOM把整个页面映射成一个多层节点结构(DOM树)，通过DOM树，开发人员获得了控制页面内容与结构的主动权，借助DOM提供的API可以轻松的增删查改任何节点。D（文档）可以理解为整个Web加载的网页文档，O（对象）可以理解为类似window对象之类的东西，可以调用属性和方法，这里我们说的是document对象，M（模型）可以理解为网页文档的树形结构，DOM树由节点构成。


浏览器对象模型（BOM）
浏览器对象模型提供了访问和操作浏览器窗口的接口。
开发人员可以使用BOM控制浏览器显示的页面以外的部分。在HTML5以前，BOM并没有一个相关的标准，大多数浏览器厂商都有自己对它的实现，HTML5出现后，BOM实现的细节有望朝着兼容性越来越高的方向发展。
从本质上讲，BOM只负责处理浏览器窗口和框架，但我们大多数时候把所有针对浏览器的js扩展都算作BOM的一部分，比如下面的一些扩展：
弹出新浏览器窗口的功能；
移动、缩放和关闭浏览器窗口的功能；
提供浏览器详细信息的navigator对象；
提供浏览器所加载页面详细信息的location对象；
对cookie的支持；
像XMLHttpRequest和IE的ActiveXObject这样的自定义对象；
==============================================JavaScript与ECMA、BOM、DOM的关系==============================================

=====================================================闭包（函数作用域）=====================================================
JavaScript中的函数执行会形成私有的作用域。
（1）作用域的销毁
一般情况下，函数执行形成一个私有的作用域，当执行完成后就销毁了->节省内存空间
（2）作用域的立即销毁
function fn(){
    var i=10;
    return function(n){
		console.log(n+i++);
　　}
}
fn()(15);//->先执行fn,有一个私有的变量i=10,返回一个堆内存地址 xxxfff111,我们发现这个地址还用到了一次,那么当前的这个fn形成的私有作用域（A）就不能立即销毁了,
　　　　　　xxxfff111(15)->输出25,A中的i变为11；当xxxfff111执行完了,发现这个地址没用了,浏览器就把A、xxxfff111都释放了
fn()(20);//->在执行fn的时候一切都从新开始了,和上面的步骤是一样的->输出30
（3）作用域的不立即销毁
function fn(){
    var i=10;
    return function(n){
		console.log(n+i++);
    }
}
var f=fn();//->fn执行形成一个私有的作用域A,A中有一个私有的变量i=10,A中返回一个地址xxxfff11,被外面的f占用了,那么A就不能销毁了
f(15);//->输出25,让A中的i=11
f(20);//->输出31,让A中的i=12

// 关于内存释放的例子
function fn() {
        var i = 10;
        return function (n) {
            console.log(n + (++i));
        }
}
var f = fn(); //首先把fn执行，然后把执行的结果赋值给f，函数执行只要看函数里面有没有return
f(15);    //26  //引用，执行完不会立即释放
f(20);    //32
fn()(15); //26  //每次执行完内存释放，作用域销毁
fn()(15); //26
fn()(20); //31
fn()(30); //41
f(30);    //43

几种不销毁常用到的形式:
（1）函数执行,返回一个引用数据类型的值,并且在函数的外面被别人接收了,那么当前函数形成的私有作用域就不再销毁了-->例如上面的案例 var f=fn();
（2）在函数执行的时候,里面的一个小函数的地址赋值给了外面元素的点击事件,那么当前小函数也相当于被外面占用了,大函数执行形成的私有的作用域也不能销毁了
//每一次循环都执行自执行函数形成一个私有的作用域(循环三次就有三个作用域,每一个作用域中都有一个i,第一个存储的是0,第二个存数的是1..)，在每一个私有的作用域中都把里面的函数绑定给了外面元素的点击事件,这样的话每一次形成的作用域都不销毁了(三个不销毁的作用域)
var oLis=document.getElementsByTagName("p");
for(var i=0;i<oLis.length;i++){
    (function(i){
        oLis[i].onclick=function(){
            console.log(i);
        }
    })(i);
}

JS中内存空间释放的问题（堆内存、栈内存）

[谷歌浏览器]
我们开辟一个内存，可能或有一些其他的变量等占用了这个内存，谷歌浏览器都会间隔一段时间看这个内存还有没有被占用，如果发现有没有被占用的内存了，就自己帮我们回收了(内存释放)
[火狐和IE]
我们开个内存，当我们引用了它，就在内存中记录一个数,增加一个引用浏览器就把这个数+1，减少一个引用，浏览器就把这个数-1...当减到零的时候浏览器就把这个内存释放了;但是有些情况下(尤其是IE)记着记着就弄乱了，内存就不能释放了-->浏览器的内存泄露
var obj={};
我们养成一个好的习惯，当我们obj这个对象使用完成了，我们手动的obj=null (null空对象指针)，浏览器会自己把刚才的堆内存释放掉
=====================================================闭包（函数作用域）=====================================================

=====================================================for循环中的var与let=====================================================
var a = [];
for (var i = 0; i < 10; i++) {
  a[i] = function () {
    console.log(i);
  };
}
a[6](); // 10
上面代码中，变量i是var命令声明的，在全局范围内都有效，所以全局只有一个变量i。每一次循环，变量i的值都会发生改变，而循环内被赋给数组a的函数内部的console.log(i)，里面的i指向的就是全局的i。也就是说，所有数组a的成员里面的i，指向的都是同一个i，导致运行时输出的是最后一轮的i的值，也就是 10。

var a = [];
for (let i = 0; i < 10; i++) {
  a[i] = function () {
    console.log(i);
  };
}
a[6](); // 6
上面代码中，变量i是let声明的，当前的i只在本轮循环有效，所以每一次循环的i其实都是一个新的变量，所以最后输出的是6。你可能会问，如果每一轮循环的变量i都是重新声明的，那它怎么知道上一轮循环的值，从而计算出本轮循环的值？这是因为JavaScript引擎内部会记住上一轮循环的值，初始化本轮的变量i时，就在上一轮循环的基础上进行计算。

另外，for循环还有一个特别之处，就是设置循环变量的那部分是一个父作用域，而循环体内部是一个单独的子作用域。
for (let i = 0; i < 3; i++) {
  let i = 'abc';
  console.log(i);
}
// abc
// abc
// abc

es6->es5   babel编译结果：
编译前
var a = [];
for (var i = 0; i < 10; i++) {
  a[i] = function () {
    console.log(i);
  };
}
编译后
var a = [];
for (var i = 0; i < 10; i++) {
  a[i] = function () {
    console.log(i);
  };
}

编译前
var a = [];
for (let i = 0; i < 10; i++) {
  a[i] = function () {
    console.log(i);
  };
}
编译后
var a = [];
var _loop = function _loop(i) {
  a[i] = function () {
    console.log(i);
  };
};
for (var i = 0; i < 10; i++) {
  _loop(i);
}
=====================================================for循环中的var与let=====================================================

=============================================================Ajax=============================================================
JSON对象
有时候在做项目的时候时常将这两个概念弄混淆，尤其是在使用springmvc的时候，后台@RequestBody接受的是一个json格式的字符串，一定是一个字符串。
先介绍一下json对象，首先说到对象的概念，对象的属性是可以用：对象.属性进行调用的。例如：
var person={"name":"zhangsan","sex":"男","age":"24"}//json对象
alert(person.name);//zhangsan
alert(typeof person);//object
person就是json对象。可以用perosn.name这种方式进行属性的调用。第三行代码就是看person的类型，为object类型

JSON字符串
字符串，我们常说的JavaScript中的字符串是单引号或者双引号引起来的。
var person='{"name":"zhangsan","sex":"男","age":"24"}';//json字符串
alert(person);//{"name":"zhangsan","sex":"男","age":"24"}
alert(typeof person);//string
person就是一个json字符串，之所以叫json字符串，因为字符串的格式符合json的格式，第三行代码也匹配其中的类型为string。

JSON字符串和JOSN对象的转换
json字符串转json对象,调用parse方法：
var person='{"name":"zhangsan","sex":"男","age":"24"}';//json字符串
var personObject = JSON.parse(person);
alert(personObject.name);//zhangsan

json对象转为json字符串，调用stringify方法：
var person={"name":"zhangsan","sex":"男","age":"24"};//json对象
var personString = JSON.stringify(person);
alert(personString);


JSON 对象
对象语法
实例
{ "name":"runoob", "alexa":10000, "site":null }
JSON 对象使用在大括号({})中书写。
对象可以包含多个 key/value（键/值）对。
key 必须是字符串，value 可以是合法的 JSON 数据类型（字符串, 数字, 对象, 数组, 布尔值或 null）。
key 和 value 中使用冒号(:)分割。
每个 key/value 对使用逗号(,)分割。
访问对象值
你可以使用点号（.）来访问对象的值：
实例
var myObj, x;
myObj = { "name":"runoob", "alexa":10000, "site":null };
x = myObj.name;
你也可以使用中括号（[]）来访问对象的值：
实例
var myObj, x;
myObj = { "name":"runoob", "alexa":10000, "site":null };
x = myObj["name"];
循环对象
你可以使用 for-in 来循环对象的属性：
实例
var myObj = { "name":"runoob", "alexa":10000, "site":null };
for (x in myObj) {
    document.getElementById("demo").innerHTML += x + "<br>";
}
在 for-in 循环对象的属性时，使用中括号（[]）来访问属性的值：
实例
var myObj = { "name":"runoob", "alexa":10000, "site":null };
for (x in myObj) {
    document.getElementById("demo").innerHTML += myObj[x] + "<br>";
}
修改值
你可以使用点号(.)来修改 JSON 对象的值：
实例
myObj.sites.site1 = "www.google.com";
你可以使用中括号([])来修改 JSON 对象的值：
实例
myObj.sites["site1"] = "www.google.com";
删除对象属性
我们可以使用 delete 关键字来删除 JSON 对象的属性：
实例
delete myObj.sites.site1;
你可以使用中括号([])来删除 JSON 对象的属性：
实例
delete myObj.sites["site1"]

JSON数组
数组作为JSON对象
实例
[ "Google", "Runoob", "Taobao" ]
JSON 数组在中括号中书写。
JSON 中数组值必须是合法的 JSON 数据类型（字符串, 数字, 对象, 数组, 布尔值或 null）。
JavaScript 中，数组值可以是以上的 JSON 数据类型，也可以是 JavaScript 的表达式，包括函数，日期，及 undefined。
JSON 对象中的数组
对象属性的值可以是一个数组：
实例
{
"name":"网站",
"num":3,
"sites":[ "Google", "Runoob", "Taobao" ]
}
我们可以使用索引值来访问数组：
实例
x = myObj.sites[0];
循环数组
你可以使用 for-in 来访问数组：
实例
for (i in myObj.sites) {
    x += myObj.sites[i] + "<br>";
}
你也可以使用 for 循环：
实例
for (i = 0; i < myObj.sites.length; i++) {
    x += myObj.sites[i] + "<br>";
}
修改数组值
你可以使用索引值来修改数组值：
实例
myObj.sites[1] = "Github";
删除数组元素
我们可以使用 delete 关键字来删除数组元素：
实例
delete myObj.sites[1];

JSON.parse()
JSON 通常用于与服务端交换数据。
在接收服务器数据时一般是字符串。
我们可以使用 JSON.parse() 方法将数据转换为 JavaScript 对象。
语法
JSON.parse(text[, reviver])
参数说明：
text:必需， 一个有效的 JSON 字符串。
reviver: 可选，一个转换结果的函数， 将为对象的每个成员调用此函数。
JSON 解析实例
例如我们从服务器接收了以下数据：
{ "name":"runoob", "alexa":10000, "site":"www.runoob.com" }
我们使用 JSON.parse() 方法处理以上数据，将其转换为 JavaScript 对象：
var obj = JSON.parse('{ "name":"runoob", "alexa":10000, "site":"www.runoob.com" }');
解析完成后，我们就可以在网页上使用 JSON 数据了：
实例
<p id="demo"></p>
<script>
var obj = JSON.parse('{ "name":"runoob", "alexa":10000, "site":"www.runoob.com" }');
document.getElementById("demo").innerHTML = obj.name + "：" + obj.site;
</script>
从服务端接收 JSON 数据
我们可以使用 AJAX 从服务器请求 JSON 数据，并解析为 JavaScript 对象。
实例
var xmlhttp = new XMLHttpRequest();
xmlhttp.onreadystatechange = function() {
    if (this.readyState == 4 && this.status == 200) {
        myObj = JSON.parse(this.responseText);
        document.getElementById("demo").innerHTML = myObj.name;
    }
};
xmlhttp.open("GET", "/try/ajax/json_demo.txt", true);
xmlhttp.send();
从服务端接收数组的 JSON 数据
如果从服务端接收的是数组的 JSON 数据，则 JSON.parse 会将其转换为 JavaScript 数组：
实例
var xmlhttp = new XMLHttpRequest();
xmlhttp.onreadystatechange = function() {
    if (this.readyState == 4 && this.status == 200) {
        myArr = JSON.parse(this.responseText);
        document.getElementById("demo").innerHTML = myArr[1];
    }
};
xmlhttp.open("GET", "/try/ajax/json_demo_array.txt", true);
xmlhttp.send();

JSON.stringify()
JSON 通常用于与服务端交换数据。
在向服务器发送数据时一般是字符串。
我们可以使用 JSON.stringify() 方法将 JavaScript 对象转换为字符串。
语法
JSON.stringify(value[, replacer[, space]])
参数说明：
value:
必需， 一个有效的 JSON 对象。
replacer:
可选。用于转换结果的函数或数组。
如果 replacer 为函数，则 JSON.stringify 将调用该函数，并传入每个成员的键和值。使用返回值而不是原始值。如果此函数返回 undefined，则排除成员。根对象的键是一个空字符串：""。
如果 replacer 是一个数组，则仅转换该数组中具有键值的成员。成员的转换顺序与键在数组中的顺序一样。当 value 参数也为数组时，将忽略 replacer 数组。
space:
可选，文本添加缩进、空格和换行符，如果 space 是一个数字，则返回值文本在每个级别缩进指定数目的空格，如果 space 大于 10，则文本缩进 10 个空格。space 有可以使用非数字，如：\t。
JavaScript 对象转换
例如我们向服务器发送以下数据：
var obj = { "name":"runoob", "alexa":10000, "site":"www.runoob.com"};
我们使用 JSON.stringify() 方法处理以上数据，将其转换为字符串：
var myJSON = JSON.stringify(obj);
myJSON 为字符串。
我们可以将 myJSON 发送到服务器：
实例
var obj = { "name":"runoob", "alexa":10000, "site":"www.runoob.com"};
var myJSON = JSON.stringify(obj);
document.getElementById("demo").innerHTML = myJSON;
JavaScript 数组转换
我们也可以将 JavaScript 数组转换为 JSON 字符串：
实例
var arr = [ "Google", "Runoob", "Taobao", "Facebook" ];
var myJSON = JSON.stringify(arr);
myJSON 为字符串。
我们可以将 myJSON 发送到服务器：
实例
var arr = [ "Google", "Runoob", "Taobao", "Facebook" ];
var myJSON = JSON.stringify(arr);
document.getElementById("demo").innerHTML = myJSON;
=============================================================Ajax=============================================================

=====================================================NodeJS和前端JS的区别=====================================================
前端JS = JS语法 + Web API
NodeJS = JS语法 + Node API

Web API
如前端网页的DOM BOM 事件 Ajax等
前端JS可以使用，因为在浏览器环境
NodeJS则无法使用，因为是NodeJS环境

NodeJS API
如处理http，文件操作
NodeJS可以使用，因为是NodeJS环境
前端JS则无法使用，因为在浏览器环境

总结：
同样的语法，不同的工作环境(环境不同提供的API也不同)
=====================================================NodeJS和前端JS的区别=====================================================