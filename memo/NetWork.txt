######################################计算机网络概述######################################
网络   计算机通过集线器或者交换机等设备组建成的局域网。（最大传输距离为100m）
互联网 无数个网络通过路由器互相连接在一起，形成了互联网。（路由器上有广域网接口）
因特网 因特网是世界上最大的互联网，连接在互联网上的计算机被大家称为主机。

互联网服务提供商（Internet Service Provider），简称ISP ============>
指的是面向公众提供下列信息服务的经营者：一是接入服务，即帮助用户接入Internet；二是导航服务，即帮助用户在Internet上找到所需要的信息；三是信息服务，即建立数据服务系统，收集、加工、存储信息，定期维护更新，并通过网络向用户提供信息内容服务

数据交换方式 ============>
电路交换(Circuit Switching)：面向连接
典型应用：打电话 申请占用通信资源=>一直占用通信资源=>释放通信资源
报文交换(Message Switching)
分组交换(Packet Switching)

作用范围============>
广域网 WAN
局域网 LAN 最大传输距离为100m，集线器和交换机可以起到信号放大和重发作用，其目的是扩大网络的传输范围。

计算机网络的性能============>
速率：连接在计算机网络上的主机在数字信道上传送数据位数的速率，也称data rate或者bit rate。单位是b/s,Kb/s,Mb/s,Gb/s
带宽：网卡或者网络传输设备所能传送的最高速率。单位是b/s,Kb/s,Mb/s,Gb/s
吞吐量：即在单位时间内通过某个网络的数据量；单位是b/s,Kb/s,Mb/s,Gb/s
发送时延：数据块长度(比特)/信道带宽(比特/秒)
传播时延：信道长度(米)/信号在信道上的传播速率(米/秒)
处理时延：
排队时延：
时延带宽积：传播时延 * 带宽
往返时间(RTT Round-Trip Time)从发送方发送数据开始，到发送方收到接收方确认

OSI 7层============>
应用层 能够产生网络流量能够和用户交互的应用程序
表示层 加密 压缩
会话层 服务和客户端建立的会话
传输层 可靠传输建立会话 不可靠传输 流量控制
网络层 IP地址编制 选择最佳路径
数据链路层 数据如何封装 添加物理层地址 MAC
物理层 电压 接口标准
######################################计算机网络概述######################################

#############################################################物理层#############################################################
典型的数据通信模型============>
输入   数字比特流                    模拟信号                     模拟信号                     数字比特流     显示
PC机------------------>调制解调器------------------>公用电话网------------------>调制解调器------------------>PC机
注意：由集线器、交换机组建的局域网是没有通过调制解调器转换成模拟信号的过程，局域网之间的计算机直接通过数字比特流通信。

数据通信的相关术语============>
通信的目的是传送消息。
数据(data)------运送数据的实体。
信号(signal)------数据的电气的或电磁的表现
"模拟信号"------代表消息参数的取值是连续的
"数字信号"------代表消息参数的取值是离散的
码元(code)------在使用时间域的波形表示数字信号时，则代表不同离散数值的基本波形就成为码元。在数字通信中常常用时间间隔相同的符号来表示一个二进制数字，这样的时间间隔内的信号称为二进制码元。而这个间隔被称为码元长度。1码元可以携带nbit的信息量。
信道一般表示向一个方向传送消息的媒体。所以平常所说的通信线路往往包括一条发送信息的信道和一条接受信息的信道。
单向通信(单工通信)------只能一个方向的通信而没有反方向的交互。例如：广播
双向交替通信(半双工通信)------通信的双方都可以发送信息，但不能双方同时发送(当然也就不能同时接受)。例如：对讲机
双向同时通信(全双工通信)------通信的双方可以通知发送信息和接受消息。例如：打电话

基带(baseband)信号和带通(band pass)信号============>
基带信号(即基本频带信号)------来自信源的信号。像计算机输出的代表各种文字或图像文字的数据信号都属于基带信号。基带信号就是发出的直接表达了要传输的信息的信号。比如我们说话的声波就是基带信号。
带通信号------把基带信号经过载波调制后，把信号的频率范围搬移到较高的频段以便在信道中传输(即仅在一段频率范围内能够通过信道)。
因此在传输距离较近时，计算机网络都采用基带传输方式，由于在近距离范围内基带信号的衰减不大，从而信号内容不会发生变化。因此在传输距离较近时，计算机网络都采用基带传输方式。如从计算机到监视器、打印机等外设的信号就是基带传输的。

基本的调制方法============>
调幅(AM):载波的振幅随基带数字信号而变化。
调频(FM):载波的频率随基带数字信号而变化。
调相(PM):载波的初始相位随基带数字信号而变化。
载波（carrier-wave,carrier-signal或carrier）是由振荡器产生并在通讯信道上传输的电波，被调制后用来传送语音或其它信息。载波频率通常比输入信号的频率高，属于高频信号，输入信号调制到一个高频载波上，就好像搭乘了一列高铁或一架飞机一样，然后再被发射和接收。载波是传送信息（话音和数据）的物理基础和承载工具。
调制：通信系统中发送端的原始电信号通常具有频率很低的频谱分量，一般不适宜直接在信道中进行传输。因此，通常需要将原始信号变换成频带适合信道传输的高频信号，这一过程被称为调制。

常用编码============>
单极性不归零编码------只使用一个电压值，用高电平表示1，没电压表示0，
双极性不归零编码------用正电平和负电平分别表示二进制数据的1和0，正负幅值相等。
双极性归零码------正负零三个电平，信号本身携带同步信息。
曼彻斯特编码------一个时钟周期只可表示一个bit，并且必须通过两次采样才能得到一个bit，但它能携带时钟信号，且可表示没有数据传输。bit中间有信号，低-高跳变为0；bit中间有信号，高-低跳变为1。
差分曼彻斯特编码------bit中间有信号跳变，bit与bit之间也有信号跳变，表示下一个bit为0，bit中间有信号跳变，bit与bit之间无信号跳变，表示下一个bit为1。差分曼彻斯特编码与曼彻斯特编码相同，但抗干扰性能强于曼彻斯特编码。

奈氏准则、香农公式============>
在限定的理想条件下，为了避免码间干扰，码元的传输速率的上限值。在任何信道中，码元传输的速率是有上限的，否则就会出现码间串扰的问题，使接收端对码元的判决（即识别）成为不可能。（例如：以n倍速率播放音乐）
理想低通信道的最高码元传输速率=2WBaud
W是理想低通信道的带宽，单位为HZ。
Baud是波特，是码元传输速率的单位。在调制解调器中经常用到波特这个概念，Bit是信息量，
如果一个码元含有3个Bit信息量即1波特=3Bit/s，数字化编码为(001-011-110-101-100-011-001)转换为模拟信号后图形为：
111
110		 |	
101		 | | 
100		 | | |  
011	   | | | | |
010    | | | | |
001	 | | | | | | |
000	——————————————————
香农(Shannon)用信息论的理论推导出了带宽受限且有高斯白噪声干扰的信道的极限、无差错的信息传输速率。信道的极限传输速率C可表达为：
C = W * log2(1+S/N) b/s
W为信道的带宽(以Hz为单位)；
S为信道内所传信号的平均功率；
N为信道内部的高斯噪声功率；

信道复用技术============>
将若干个彼此独立的信号，合并为一个可在同一信道上同时传输的复合信号的方法。比如，传输的语音信号的频谱一般在300~3400Hz内，为了使若干个这种信号能在同一信道上传输，可以把它们的频谱调制到不同的频段，合并在一起而不致相互影响，并能在接收端彼此分离开来。
频分复用（FDM，Frequency-Division-Multiplexing）就是将用于传输信道的总带宽划分成若干个子频带（或称子信道），每一个子信道传输1路信号。频分复用要求总频率宽度大于各个子信道频率之和，同时为了保证各子信道中所传输的信号互不干扰，应在各子信道之间设立隔离带，这样就保证了各路信号互不干扰（条件之一）。
时分复用（TDM，Time-Division-Multiplexing）就是将提供给整个信道传输信息的时间划分成若干时间片（简称时隙），并将这些时隙分配给每一个信号源使用，每一路信号在自己的时隙内独占信道进行数据传输。时分复用技术的特点是时隙事先规划分配好且固定不变，所以有时也叫同步时分复用。其优点是时隙分配固定，便于调节控制，适于数字信息的传输；缺点是当某信号源没有数据传输时，它所对应的信道会出现空闲，而其他繁忙的信道无法占用这个空闲的信道，因此会降低线路的利用率。
波分复用（WDM，Wavelength-Division-Multiplexing）通信是由光来运载信号进行传输的方式。在光通信领域，习惯按波长而不是按频率来命名。因此，所谓的其本质上也是频分复用而已。WDM是在1根光纤上承载多个波长（信道）系统，将1根光纤转换为多条“虚拟”纤，当然每条虚拟纤独立工作在不同波长上，这样极大地提高了光纤的传输容量。由于WDM系统技术的经济性与有效性，使之成为当前光纤通信网络扩容的主要手段。
码分复用（CDM，Code-Division-Multiplexing）是靠不同的编码来区分各路原始信号的一种复用方式，主要和各种多址技术结合产生了各种接入技术，包括无线和有线接入。例如在多址蜂窝系统中是以信道来区分通信对象的，一个信道只容纳1个用户进行通话，许多同时通话的用户，互相以信道来区分，这就是多址。

宽带接入技术============>
标准模拟电话信号的频带被限制在300~3400Hz的范围内，ADSL技术把0~4kHz低端频谱留给传统电话使用，而把原来没有被利用的高端频谱留给用户上网使用。数据信号和电话音频信号以频分复用原理调制于各自频段互不干扰，上网的同时可以拨打或接听电话。(而且上网的过程中也可以继续在高频端使用频分复用技术，利用多信道实现同时聊QQ、浏览网页、观看视频等)
#############################################################物理层#############################################################

#############################################################数据链路层(数据帧)#############################################################
数据链路层的三个核心问题============>
封装成帧
透明传输
差错控制

数据链路层使用的信道主要有以下两种类型：
点对点信道：这种信道使用一对一的点对点通信方式。
广播信道：这种信道使用一对多的广播通信方式，因此过程比较负责。广播信道上连接的主机很多，因此必须使用专有的共享信道协议来协调这些主机的数据发送

封装成帧============>
封装成帧（framing）就是在一段数据的前后分别添加首部和尾部，这样就构成了一个帧。接收端在收到物理层上交的比特流后，就能根据首部和尾部的标记，从比特流中识别帧的开始和结束。
SOH(start of header) | 数据部分：最大传输单元MTU(Maximum Transfer Unit)(IP数据报) | EOT(end of transmission)

透明传输============>
透明传输是指不管所传数据是什么样的比特组合，都应当能够在链路上传送。当所传数据中的比特组合恰巧与某一个控制信息完全一样时，就必须采取适当的措施，使接收方不会将这样的数据误认为是某种控制信息。这样才能保证数据链路层的传输是透明的。(比如帧首部:SOH和帧尾部:EOT就是控制信息)
可以用字节填充法或字符填充解决透明传输问题：在控制字符SOH、EOT的前面插入一个转义字符ESC（其十六进制编码是1B，二进制是00011011）。而接收端的数据链路层在把数据送往网络层之前删除这个插入的转义字符。

差错控制============>
现实的通信链路都不会是理想的。传输过程中，1可能变成0，0可能变成1。在一段时间内，传输错误的比特占所传输比特总数的比率称为误码率。误码率和信噪比有很大的关系。因此，在计算机网络传输数据时，必须采用各种差错控制技术。目前在数据链路层广泛使用了循环冗余检验（CRC）的检错技术。在数据链路层的CRC检验都是用硬件完成的，处理很迅速，因此不会延误数据的传输。为什么数据链路层要以帧为单位来传送数据呢？因为如果不以帧为单位，就无法加入冗余码来进行差错检验。
******************************************************
冗余检验(CRC)：
【发送端】
把数据划分为组，每组有K个比特；
例如数据M=10110011(k=6)；
在数据M的后面加上n位冗余码构成一帧，一个发送n+k位；
  1、用二进制模2运算进行2^n乘M的运算，相当于在M后面添加n个0。------101100110000
  2、得到(k+n)位的数除以双方事先规定好的(n+1)位的除数P.      ------101100110000/11001
  3、最后得到的余数R就是冗余码，称为帧检验序列FCS.           ------R=FCS=0100
  4、最后发送2^n*M+FCS                                       ------101100110100
【接收端】
把收到的每一帧都除以同样的除数P(模2运算)
检查得到的余数R
若R=0，帧没差错，接受；若R<>0，有差错，丢弃。  
******************************************************

媒体接入控制MAC============>
媒体接入控制的基本概念：比如一根同轴电缆，有多台主机连接到这根同轴电缆上，它们共享这根传输媒体，形成了一个总线型的局域网。各主机竞争使用总线，随机地在信道上发送数据。如果恰巧有两个或更多的站点在同一时刻发送数据，那么信号在共享媒体上就要产生碰撞，即发生了冲突，使得这些站点的发送都失败。共享信道要着重考虑的一个问题就是如何协调多个发送和接收站点对一个共享传输媒体的占用，即媒体接入控制MAC（Medium Access Control）。
媒体接入控制技术主要分为两类：一类是静态划分信道；另一类是动态接入控制。
静态划分信道：预先固定分配好信道，这类方法非常不灵活，对于突发性数据传输信道利用率会很低。通常在无线网络的物理层使用，而不是在数据链路层中使用。(频分复用、时分复用、波分复用、码分复用)
动态接入控制：所有站点通过竞争，随机地在信道上发送数据，如果恰巧有两个或更多的站点在同一时刻发送数据，而信号在共享媒体上就要产生碰撞（即发生了冲突），使得这些站点的发送都失败，因此，这类协议要解决的关键问题是如何尽量避免冲突及在发生冲突后如何尽快恢复通信，著名的共享式以太网采用的就是随机接入。
随着技术的发展，交换技术的成熟和成本的降低，具有更高性能的使用点对点链路和链路层交换机的交换式局域网在有线领域已完全取代了共享式局域网，但由于无线信道的广播天性，无线局域网仍然使用的是共享媒体技术。

载波监听多点接入/碰撞检测协议(动态接入控制-随机接入-CSMA/CD协议)============>
多点接入：表示许多计算机以多点接入的方式连接在一根总线上
载波监听：是指每一个站在发送数据之前先要检测一下总线上是否有其他计算机在发送数据，如果有，则暂时不要发送数据，以免碰撞。
使用CSMA/CD协议的以太网不能进行全双工通信而只能进行双向交替通信(半双工通信)，每个站在发送数据之后的一小段时间内，存在着遭遇碰撞的可能性。这种发送的不确定性使整个以太网的平均通信量远小于以太网的最高数据率。

以太网(Ethernet)============>
总线上的每一个工作的计算机都能检测到B发送的数据信号。由于只有计算机D的地址与数据帧首部写入的地址一致，因此只有D才接受这个数据帧。其他所有计算机都检测到不是发送给它们的数据帧，因此就丢弃了这个数据帧。


#############################################################数据链路层(数据帧)#############################################################

#############################################################网络层(数据报)#############################################################
IP协议============>
网际协议IP是TCP/IP体系中两个最主要的协议之一。与IP协议配套使用的还有四个协议：
地址解析协议ARP(Address Resolution Protocol)
逆地址解析协议RARP(Reverse Address Resolution Protocol)
网际控制报文协议ICMP(Internet Control Message Protocol)
网际组管理协议IGMP(Internet Group Management Protocol)

动态路由协议============>
动态路由协议通过路由信息的交换生成并维护转发引擎所需的路由表。当网络拓扑结构改变时动态路由协议可以自动更新路由表，并负责决定数据传输最佳路径。在动态路由中，管理员不再需要与静态路由一样，手工对路由器上的路由表进行维护，而是在每台路由器上运行一个路由协议。这个路由协议会根据路由器上的接口的配置（如IP地址的配置）及所连接的链路的状态，生成路由表中的路由表项。
常见的动态路由协议有：RIP、OSPF、BGP等
RIP(Routing-Information-Protocol,路由信息协议）是使用最久的协议之一。RIP是一种分布式的基于距离向量的路由选择协议，RIP协议是施乐公司20世纪80年代推出的，主要适用于小规模的网络环境。RIP协议主要用于一个AS(自治系统)内的路由信息的传递，每30s发送一次路由信息更新。RIP协议采用距离向量算法，在实际使用中已经较少适用。在默认情况下，RIP使用一种非常简单的度量制度：距离就是通往目的站点所需经过的链路数，取值为0~16，数值16表示路径无限长。RIP进程使用UDP的520端口来发送和接收RIP分组。RIP分组每隔30s以广播的形式发送一次，为了防止出现“广播风暴”，其后续的分组将做随机延时后发送。在RIP中，如果一个路由在180s内未被刷新，则相应的距离就被设定成无穷大，并从路由表中删除该表项。RIP分组分为两种：请求分组和响应分组。
OSPF(Open-Shortest-Path-First开放式最短路径优先）是一个内部网关协议(Interior-Gateway-Protocol，简称IGP），用于在单一自治系统（autonomous-system,AS）内决策路由。是对链路状态路由协议的一种实现，隶属内部网关协议（IGP），故运作于自治系统内部。著名的迪克斯彻（Dijkstra）算法被用来计算最短路径树。OSPF支持负载均衡和基于服务类型的选路，也支持多种路由形式，如特定主机路由和子网路由等。
BGP(Border-Gateway-Protocol，边界网关协议)BGP是唯一一个用来处理像因特网大小的网络的协议，也是唯一能够妥善处理好不相关路由域间的多路连接的协议。BGP构建在EGP的经验之上。BGP系统的主要功能是和其他的BGP系统交换网络可达信息。网络可达信息包括列出的自治系统（AS）的信息。这些信息有效地构造了 AS 互联的拓扑图并由此清除了路由环路，同时在 AS 级别上可实施策略决策。

IPv4============>
A类地址 |0       |                        | 
          net-id        host-id
B类地址 |10              |                | 
              net-id        host-id
C类地址 |110                     |        | 
              net-id               host-id
D类地址 |1110|         多播地址           |
E类地址 |1111|         保留地址           |

          最大网络数       第一个可用的网络号    最后一个可用的网络号   每个网络中最大的主机数
A类地址   126(2^7-2)       1                     126                    16777214
B类地址   16383(2^14-1)    128.1                 191.255                65534
C类地址   2097151(2^21-1)  192.0.1               223.255.255            254
注意： 根据RFC 791 - Internet Protocol的说明：A value of zero in the network field means this network.
也就是说net全0表示本网络，因此真正可用的net值应该是从1开始。
那么这样说来因为这条规则而无法使用的网络号是：
A: 0.0.0.0/8
B: 128.0.0.0/16
C: 192.0.0.0/24
所以A、B、C三类网络的第一个可用网络号分别是：1、128.1和192.0.1

特殊地址：
127.0.0.1   本地回环地址(所有127.X.X.X的地址都是表示本计算机的地址)
169.254.0.0 169.254.X.X是保留地址。如果你的IP地址是自动获取IP地址，而你在网络上又没有找到可用的DHCP服务器。就会得到其中一个IP。
保留的私网地址：
10.0.0.0
172.16.0.0  -- 172.31.0.0
192.168.0.0 -- 192.168.255.0

注意：IP地址的主机部分不能全为0或者全为1，全为0表示的是网络地址，全为1表示的是广播地址。

计算机在网络中的通信过程============>
1.交换机基于数据帧的MAC地址转发数据帧，路由器基于数据报的IP地址转发数据包
2.数据报在传输过程中不变，过网络设备数据帧要用新的物理层地址重新封装
3.MAC地址决定了数据帧下一跳哪个设备接收，而IP地址决定了数据报的起点和终点

ARP协议============>
通过广播将IP地址解析成MAC地址
ARP命令用于显示和修改“地址解析协议（ARP）”缓存中的项目。ARP缓存中包含一个或多个表，它们用于存储IP地址及其经过解析的以太网或令牌环物理地址。
arp -a              //用于查看高速缓存中的所有项目。
arp -s IP 物理地址  //向ARP缓存添加可将IP地址InetAddr解析成物理地址EtherAddr的静态项。 
arp -d IP           //删除指定的IP地址项。                
linux中可以使用tcpdump抓包，
-c：指定要抓取的包数量。
-i interface：指定tcpdump需要监听的接口。
-X：输出包的头部数据，会以16进制和ASCII两种方式同时输出。
-XX：输出包的头部数据，会以16进制和ASCII两种方式同时输出，更详细。
-v：当分析和打印的时候，产生详细的输出。
-vv：产生比-v更详细的输出。
-vvv：产生比-vv更详细的输出
1）抓取本机eth0中tcp和udp端口号为514的数据，抓取数量为10个，详细显示数据包头和分析。
# tcpdump -i enp0s8 -c 10 udp or tcp port 8085 -XX -vvv
（2）抓取源地址为192.168.1.100，端口号不为8080的数据
# tcpdump -i enp0s8 src 192.168.56.1 and tcp port not 8080

数据报生存时间(TTL Time To Live)============>
TTL是Time To Live的缩写，该字段指定IP包被路由器丢弃之前允许通过的最大网段数量。
不同的操作系统默认下TTL是不同的。默认情况下，Linux系统的TTL值为64或255，WindowsNT/2000/XP系统的TTL值为128，Windows98系统的TTL值为32，UNIX主机的TTL值为255。
可以通过ping命令中的-i修改TTL值。(比如ping www.sina.com -i 1，表示修改TTL的值为1，那就可以得到第一个路由器的ip地址，依次类推-i 2可以得到第二个路由器的ip地址)

在Cisco Packet Tracer中添加静态路由============>
show ip route
en
config t
ip route 192.168.0.0 255.255.255.0 172.16.0.1     //增加路由
no ip route 192.168.0.0 255.255.255.0 172.16.0.1  //删除路由
CTRL+Z
show ip route

linux下静态路由修改命令============>
方法一：
添加路由
route add -net 192.168.0.0/24 gw 192.168.0.1
route add -host 192.168.1.1 dev 192.168.0.1
删除路由
route del -net 192.168.0.0/24 gw 192.168.0.1
add 增加路由
del 删除路由
-net 设置到某个网段的路由
-host 设置到某台主机的路由
gw 出口网关 IP地址
dev 出口网关 物理设备名
增加默认路由
route add default gw 192.168.0.1
默认路由一条就够了
route -n 查看路由表
方法二：
添加路由
ip route add 192.168.0.0/24 via 192.168.0.1
ip route add 192.168.1.1 dev 192.168.0.1
删除路由
ip route del 192.168.0.0/24 via 192.168.0.1
add 增加路由
del 删除路由
via 网关出口 IP地址
dev 网关出口 物理设备名
增加默认路由
ip route add default via 192.168.0.1 dev eth0
via 192.168.0.1 是我的默认路由器
查看路由信息
ip route

windows下静态路由修改命令============>
route ADD 157.0.0.0 MASK 255.0.0.0 157.55.80.1
windows下查看某个命令的帮助：route /?

ICMP协议============>
ICMP协议是一种面向无连接的协议，用于传输出错报告控制信息。它是一个非常重要的协议，它对于网络安全具有极其重要的意义。它属于网络层协议，主要用于在主机与路由器之间传递控制信息，包括报告错误、交换受限控制和状态信息等。当遇到IP数据无法访问目标、IP路由器无法按当前的传输速率转发数据包等情况时，会自动发送ICMP消息。ICMP是TCP/IP模型中网络层的重要成员，与IP协议、ARP协议、RARP协议及IGMP协议共同构成TCP/IP模型中的网络层。ping和tracert是两个常用网络管理命令，ping用来测试网络可达性，tracert用来显示到达目的主机的路径。ping和tracert都利用ICMP协议来实现网络功能，它们是把网络协议应用到日常网络管理的典型实例。
#############################################################网络层(数据报)#############################################################


#############################################################传输层(数据包)#############################################################
telnet============>
测试远程计算机打开的端口
telnet 192.168.56.110 8085

TCP报文格式详解============>
TCP报文是TCP层传输的数据单元，也叫报文段。
1、端口号：用来标识同一台计算机的不同的应用进程；占2个字节，16比特的端口号加上32比特的IP地址，共同构成相当于传输层服务访问点的地址，即“插口”。
1）源端口：源端口和IP地址的作用是标识报文的返回地址。
2）目的端口：端口指明接收方计算机上的应用程序接口。
TCP报头中的源端口号和目的端口号同IP数据报中的源IP与目的IP唯一确定一条TCP连接。
2、序号和确认号：各占4个字节，是TCP可靠传输的关键部分。序号是本报文段发送的数据组的第一个字节的序号。在TCP传送的流中，每一个字节一个序号。e.g.一个报文段的序号为300，此报文段数据部分共有100字节，则下一个报文段的序号为400。所以序号确保了TCP传输的有序性。确认号，即ACK，指明下一个期待收到的字节序号，表明该序号之前的所有数据已经正确无误的收到。确认号只有当ACK标志为1时才有效。比如建立连接时，SYN报文的ACK标志位为0。
3、数据偏移／首部长度：4bits。由于首部可能含有可选项内容，因此TCP报头的长度是不确定的，报头不包含任何任选字段则长度为20字节，4位首部长度字段所能表示的最大值为1111，转化为10进制为15，15*32/8=60，故报头最大长度为60字节。首部长度也叫数据偏移，是因为首部长度实际上指示了数据区在报文段中的起始偏移值。
4、保留：为将来定义新的用途保留，现在一般置0。
5、控制位：URG ACK PSH RST SYN FIN，共6个，每一个标志位表示一个控制功能。
1）URG(urgent-紧急)：紧急指针标志，为1时表示紧急指针有效，为0则忽略紧急指针。
2）ACK(acknowledgement-确认)：确认序号标志，为1时表示确认号有效，为0表示报文中不含确认信息，忽略确认号字段。
3）PSH(push-传送)：push标志，为1表示是带有push标志的数据，指示接收方在接收到该报文段以后，应尽快将这个报文段交给应用程序，而不是在缓冲区排队。
4）RST(reset-重置)：重置连接标志，用于重置由于主机崩溃或其他原因而出现错误的连接。或者用于拒绝非法的报文段和拒绝连接请求。
5）SYN(synchronous-建立联机)：同步序号，用于建立连接过程，在连接请求中，SYN=1和ACK=0表示该数据段没有使用捎带的确认域，而连接应答捎带一个确认，即SYN=1和ACK=1。
6）FIN(finish-结束)：finish标志，用于释放连接，为1时表示发送方已经没有数据发送了，即关闭本方数据流。
6、窗口：滑动窗口大小，用来告知发送端接受端的缓存大小，以此控制发送端发送数据的速率，从而达到流量控制。窗口大小时一个16bit字段，因而窗口大小最大为65535。
7、校验和：奇偶校验，此校验和是对整个的TCP报文段，包括TCP头部和TCP数据，以16位字进行计算所得。由发送端计算和存储，并由接收端进行验证。
8、紧急指针：只有当URG标志置1时紧急指针才有效。紧急指针是一个正的偏移量，和顺序号字段中的值相加表示紧急数据最后一个字节的序号。TCP的紧急方式是发送端向另一端发送紧急数据的一种方式。
9、选项和填充：最常见的可选字段是最长报文大小，又称为MSS（Maximum-Segment-Size），每个连接方通常都在通信的第一个报文段（为建立连接而设置SYN标志为1的那个段）中指明这个选项，它表示本端所能接受的最大报文段的长度。选项长度不一定是32位的整数倍，所以要加填充位，即在这个字段中加入额外的零，以保证TCP头是32的整数倍。
10、数据部分：TCP报文段中的数据部分是可选的。在一个连接建立和一个连接终止时，双方交换的报文段仅有TCP首部。如果一方没有数据要发送，也使用没有任何数据的首部来确认收到的数据。在处理超时的许多情况中，也会发送不带任何数据的报文段。

三次握手过程============>
1、主机A发送位码为SYN＝1,随机产生Seq Number=XXX的数据包到服务器，主机B由SYN＝1知道，A要求建立联机，主机A的状态变为SYN_SENT； 
2、主机B收到请求后要确认联机信息，向A发送Ack Number=(主机A的Seq+1),SYN=1,ACK=1,随机产生Seq Number=YYY的包，此时主机B的状态变为SYN_RCVD； 
3、主机A收到后检查Ack Number是否正确，即第一次发送的Seq Number+1,以及位码ACK是否为1，若正确，主机A状态变为ESTABLISHED；主机A会再发送Ack Number=(主机B的Seq Number+1),ACK=1，主机B收到后确认Ack Number与ACK=1，若正确，主机B状态变为ESTABLISHED，连接建立成功； 

四次挥手的过程============>
挥手之前主动释放连接的客户端结束ESTABLISHED阶段。随后开始“四次挥手”：
1、首先客户端想要释放连接，向服务器端发送一段TCP报文，其中：
标记位为FIN，表示“请求释放连接“；
序号为Seq=U；
随后客户端进入FIN-WAIT-1阶段，即半关闭阶段。并且停止在客户端到服务器端方向上发送数据，但是客户端仍然能接收从服务器端传输过来的数据。
注意：这里不发送的是正常连接时传输的数据(非确认报文)，而不是一切数据，所以客户端仍然能发送ACK确认报文。
2、服务器端接收到从客户端发出的TCP报文之后，确认了客户端想要释放连接，随后服务器端结束ESTABLISHED阶段，进入CLOSE-WAIT阶段（半关闭状态）并返回一段TCP报文，其中：
标记位为ACK，表示“接收到客户端发送的释放连接的请求”；
序号为Seq=V；
确认号为Ack=U+1，表示是在收到客户端报文的基础上，将其序号Seq值加1作为本段报文确认号Ack的值；
随后服务器端开始准备释放服务器端到客户端方向上的连接。
客户端收到从服务器端发出的TCP报文之后，确认了服务器收到了客户端发出的释放连接请求，随后客户端结束FIN-WAIT-1阶段，进入FIN-WAIT-2阶段
前"两次挥手"既让服务器端知道了客户端想要释放连接，也让客户端知道了服务器端了解了自己想要释放连接的请求。于是，可以确认关闭客户端到服务器端方向上的连接了
3、服务器端自从发出ACK确认报文之后，经过CLOSED-WAIT阶段，做好了释放服务器端到客户端方向上的连接准备，再次向客户端发出一段TCP报文，其中：
标记位为FIN，ACK，表示“已经准备好释放连接了”。注意：这里的ACK并不是确认收到客户端报文的确认报文。
序号为Seq=W；
确认号为Ack=U+1；表示是在收到客户端报文的基础上，将其序号Seq值加1作为本段报文确认号Ack的值。
随后服务器端结束CLOSE-WAIT阶段，进入LAST-ACK阶段。并且停止在服务器端到客户端的方向上发送数据，但是服务器端仍然能够接收从客户端传输过来的数据。
4、客户端收到从服务器端发出的TCP报文，确认了服务器端已做好释放连接的准备，结束FIN-WAIT-2阶段，进入TIME-WAIT阶段，并向服务器端发送一段报文，其中：
标记位为ACK，表示“接收到服务器准备好释放连接的信号”。
序号为Seq=U+1；表示是在收到了服务器端报文的基础上，将其确认号Ack值作为本段报文序号的值。
确认号为Ack=W+1；表示是在收到了服务器端报文的基础上，将其序号Seq值作为本段报文确认号的值。
随后客户端开始在TIME-WAIT阶段等待2MSL
上述1之后到4之前客户端到服务端的TCP报文中的SeqNumber将不再变化（都是U），因为客户端再发送完释放连接的报文后将停止在客户端到服务器端方向上发送数据
上述2到3的过程中服务器往客户端的报文中的序号由V增大到了W，这是因为服务器在收到了客户端发送的FIN报文后先向客户端回一个ACK报文段，然后会观察自己是否还有数据没有发送给客户端，如果有，先把数据发送给客户端再发送FIN报文。在2之后由于服务器端有可能再向客户端发送了数据所以3的报文中序号可能会大于2中的序号

TCP的序列号（Sequence Number）和确认号（Acknowledgment Number）============>
Seq-Number代表的是发出的并且被对方确认好的数据长度
Ack-Number代表的是自己接受到的并且确认好的数据长度
上述1表示在发送FIN之前，客户端发送给服务器并且完成确认的数据的长度为：U
上述2表示服务器接受到客户端的FIN请求并完成确认，此时客户端发送给服务器并且完成确认的数据的长度为：U + 1（服务器发送给客户端并且完成确认的数据的长度为：v）
在上述2之后假设服务器还有3个数据包需要发送给客户端，流程如下所示：
数据包1：服务器到客户端的Seq-Number=v+L1,Ack-Number=U+1;客户端响应的Seq-Number=U+1;Ack-Number=v+L1（客户端只是单纯确认从服务器接收的数据无任何数据发送到服务器）
数据包2：服务器到客户端的Seq-Number=v+L1+L2,Ack-Number=U+1;客户端响应的Seq-Number=U+1;Ack-Number=v+L1+L2
数据包3：服务器到客户端的Seq-Number=v+L1+L2+L3,Ack-Number=U+1;客户端响应的Seq-Number=U+1;Ack-Number=v+L1+L2+L3
注意：由于只有在发送方有数据发送、或者无数据传输且位码SYN=1或FIN=1时并且在收到对方的Ack-Number之后才会改变发送方的Seq-Number；而在上述数据包1到数据包3的过程中客户端的响应包只是确认从服务器传输过来的数据，所以服务器报文中的Ack-Number和客户端报文中的Seq-Number是不再变化的

为什么“握手”是三次，“挥手”却要四次？============>
因为当Server端收到Client端的SYN连接请求报文后，可以直接发送SYN+ACK报文。其中ACK报文是用来应答的，SYN报文是用来同步的。但是关闭连接时，当Server端收到FIN报文时，很可能并不会立即关闭SOCKET，所以只能先回复一个ACK报文，告诉Client端，"你发的FIN报文我收到了"。只有等到我Server端所有的报文都发送完了，我才能发送FIN报文，因此不能一起发送。故需要四步握手。

为什么客户端在TIME-WAIT阶段要等2MSL?============>
为的是确认服务器端是否收到客户端发出的ACK确认报文
当客户端发出最后的ACK确认报文时，并不能确定服务器端能够收到该段报文。所以客户端在发送完ACK确认报文之后，会设置一个时长为2MSL的计时器。MSL指的是Maximum Segment Lifetime：一段TCP报文在传输过程中的最大生命周期。2MSL即是服务器端发出为FIN报文和客户端发出的ACK确认报文所能保持有效的最大时长。服务器端在1MSL内没有收到客户端发出的ACK确认报文，就会再次向客户端发出FIN报文；
如果客户端在2MSL内，再次收到了来自服务器端的FIN报文，说明服务器端由于各种原因没有接收到客户端发出的ACK确认报文。客户端再次向服务器端发出ACK确认报文，计时器重置，重新开始2MSL的计时；
否则客户端在2MSL内没有再次收到来自服务器端的FIN报文，说明服务器端正常接收了ACK确认报文，客户端可以进入CLOSED阶段，完成“四次挥手”。
所以，客户端要经历时长为2SML的TIME-WAIT阶段；这也是为什么客户端比服务器端晚进入CLOSED阶段的原因
MSL是Maximum-Segment-Lifetime英文的缩写，中文可以译为“报文最大生存时间”，他是任何报文在网络上存在的最长时间，超过这个时间报文将被丢弃。因为tcp报文（segment）是ip数据报（datagram）的数据部分，而ip头中有一个TTL域，TTL是time-to-live的缩写，中文可以译为“生存时间”，这个生存时间是由源主机设置初始值但不是存的具体时间，而是存储了一个ip数据报可以经过的最大路由数，每经过一个处理他的路由器此值就减1，当此值为0则数据报将被丢弃，同时发送ICMP报文通知源主机。RFC-793中规定MSL为2分钟，实际应用中常用的是30秒，1分钟和2分钟等。

SYN和FIN占一个序列号的原因============>
TCP是一个支持可靠数据传输的网络协议，怎么做到可靠传输？主要是靠“确认”这个步骤来做到的，也就是ACK号。用ACK号来表达我这边已经收到了你传过来的东西，注意这里的东西是一个广义的概念，包含了数据和命令两种内容。在可靠的TCP传输过程中，用于建立和释放这个可靠通道的东西就是命令。这两个过程都是需要双方主动参与和确认回复的，当一方想开始一段可靠连接时，另外一方，需要对这一命令进行确认，确认只能通过确认号来做。这个事情在断开连接的时候也是一样的。我们知道TCP除了SYN和FIN还有其它的标志，为什么他们不需要占用一个序列号呢？首先，ACK就不用说了，它本身就是为了确认这个动作而生的，如果再给它一个序列号，就意味着还要给这一序列号进行ACK，这是一个很奇怪的事情。PSH,URG是一个属性，一个附加在一段数据传输上的属性，它不属于命令或数据，RST比较特殊，它似乎是一个命令，但是基本上如果需要用这个命令的时候，TCP的可靠性也基本没有了，所以对这个命令进行确认已经无意义啦。总的来说，TCP是用“确认”这个手段来保证可靠的，在TCP整个过程中，我们需要确认SYN,FIN,两个命令，以及数据传输，这样才能保证可靠。

socket连接关闭过程============>
1、当内核从Client端的应用程序收到Close Signal（即：应用程序调用socket.close()），首先会往对端(即Server端)发送一个FIN包，接着将自身的状态置为 FIN_WAIT_1；
2、服务器收到FIN后向客户端发送ACK，服务器的状态变为CLOSE_WAIT；
3、客户端收到ACK后就进入FIN_WAIT_2状态，此时连接已经断开了一半了。如果服务器还有数据要发送给客户端，就会继续发送；
4、直到发完数据，就会发送FIN报文，此时服务器进入LAST_ACK状态；
5、客户端收到服务器的FIN后，马上发送ACK给服务器，此时客户端进入TIME_WAIT状态； 
6、再过了2MSL长的时间后进入CLOSED状态。服务器收到客户端的ACK就进入CLOSED状态。
注意，在通过TCP四次挥手来关闭已建立的TCP连接的过程中，我的理解socket连接一直是没有关闭的，否则双方是无法进行通行的，比如说在上述的第一步中客户端就把socket连接关闭了的话那就无法收到第二步中服务器发送给客户端的ACK确认信号了；socket真正的关闭要到第六步，在四次挥手全部完成后。

状态迁移过程============>
　　客户端：
　　　　CLOSED->SYN_SENT->ESTABLISHED->FIN_WAIT_1->FIN_WAIT_2->TIME_WAIT->CLOSED
　　服务端
　　　　CLOSED->LISTEN->SYN_RECEIVED->ESTABLISHED->CLOSE_WAIT->LAST_ACK->CLOSE

Wireshark工具============>
1、关闭相对序列号/确认号：Edit->Preferences->protocols->TCP，去掉Relative-sequence-number后面勾选框中的√即可
2、绘制流：Statistics->Flow-Graph...->TCP flow->OK（统计->流量图->TCP flow）
#############################################################传输层(传输层)#############################################################