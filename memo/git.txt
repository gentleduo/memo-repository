github账号:gentleduo@163.com
github密码:lzd830319

生成SSH Key：（实际上就是配置免密登陆）
ssh-keygen -t [rsa|dsa]，将会生成密钥文件和私钥文件id_rsa,id_rsa.pub或id_dsa,id_dsa.pub（按三次回车，完成生成私钥和公钥）
成功的话会在~/下生成.ssh文件夹，进去，打开id_rsa.pub，复制里面的key。回到github上，进入Account=>Settings（账户配置）
左边选择SSH and GPG keys，然后点击New SSH key按钮,title设置标题，可以随便填，粘贴在你电脑上生成的key。
（1.rsa和dsa为两种加密方式，一般用rsa；2.生成的秘钥文件Windows位于/Users/your_user_name/.ssh/目录下、linux系统的话为：/root/.ssh/目录下）

Git中https和ssh相互切换方法
The git remote set-url command takes two arguments:
An existing remote name, for example, origin
A new URL for the remote, for example:
    1.https://github.com/USERNAME/REPOSITORY_2.git if you’re updating to use HTTPS
    2.git@github.com:USER/REPOSITORY_2.git if you’re updating to use SSH
Switching remote URLs from SSH to HTTPS
List your existing remotes in order to get the name of the remote you want to change.
$ git remote -v
#origin git@github.com:USERNAME/REPOSITORY.git (fetch)
#origin git@github.com:USERNAME/REPOSITORY.git (push)
Change your remote’s URL from SSH to HTTPS with the remote set-url command.
$ git remote set-url origin https://github.com/USERNAME/REPOSITORY_2.git
Verify that the remote URL has changed.
$ git remote -v
#Verify new remote URL
#origin https://github.com/USERNAME/REPOSITORY2.git (fetch)
#origin https://github.com/USERNAME/REPOSITORY2.git (push)
Switching remote URLs from HTTPS to SSH
List your existing remotes in order to get the name of the remote you want to change.
$ git remote -v
#origin https://github.com/USERNAME/REPOSITORY.git (fetch)
#origin https://github.com/USERNAME/REPOSITORY.git (push)
Change your remote’s URL from HTTPS to SSH with the remote set-url command.
$ git remote set-url origin git@github.com:USERNAME/REPOSITORY2.git
Verify that the remote URL has changed.
$ git remote -v
#Verify new remote URL
#origin git@github.com:USERNAME/REPOSITORY2.git (fetch)
#origin git@github.com:USERNAME/REPOSITORY2.git (push)

############################################################Git 配置############################################################
Git 提供了一个叫做 git config 的工具，专门用来配置或读取相应的工作环境变量。
这些环境变量，决定了 Git 在各个环节的具体工作方式和行为。这些变量可以存放在以下三个不同的地方：
    /etc/gitconfig 文件：系统中对所有用户都普遍适用的配置。若使用 git config 时用 --system 选项，读写的就是这个文件。
    ~/.gitconfig 文件：用户目录下的配置文件只适用于该用户。若使用 git config 时用 --global 选项，读写的就是这个文件。
    当前项目的 Git 目录中的配置文件（也就是工作目录中的 .git/config 文件）：这里的配置仅仅针对当前项目有效。每一个级别的配置都会覆盖上层的相同配置，所以 .git/config 里的配置会覆盖 /etc/gitconfig 中的同名变量。

用户信息
Git 为你的每一个提交都记录你的名字与电子邮箱地址，所以第一步需要配置用户名和邮箱地址：
$ git config --global user.name "gentleduo"
$ git config --global user.email gentleduo@163.com
如果用了 --global 选项，那么更改的配置文件就是位于你用户主目录下的那个，以后你所有的项目都会默认使用这里配置的用户信息。
如果要在某个特定的项目中使用其他名字或者电邮，只要去掉 --global 选项重新配置即可，新的设定保存在当前项目的 .git/config 文件里。

文本编辑器
设置Git默认使用的文本编辑器, 一般可能会是 Vi 或者 Vim。如果你有其他偏好，比如 Emacs 的话，可以重新设置：:
$ git config --global core.editor emacs 

差异分析工具
还有一个比较常用的是，在解决合并冲突时使用哪种差异分析工具。比如要改用 vimdiff 的话：
$ git config --global merge.tool vimdiff
Git 可以理解 kdiff3，tkdiff，meld，xxdiff，emerge，vimdiff，gvimdiff，ecmerge，和 opendiff 等合并工具的输出信息。

查看配置信息
要检查已有的配置信息，可以使用 git config --list 命令：
$ git config --list
http.proxy=socks5://127.0.0.1:1080
user.email=gentleduo@163.com
user.name=gentleduo
有时候会看到重复的变量名，那就说明它们来自不同的配置文件（比如 /etc/gitconfig 和 ~/.gitconfig），不过最终 Git 实际采用的是最后一个。
也可以直接查阅某个环境变量的设定，只要把特定的名字跟在后面即可，像这样：
$ git config user.name
gentleduo
############################################################Git 配置############################################################

###################################################Git 工作区、暂存区和版本库###################################################
工作区：就是你在电脑里能看到的目录。
暂存区：英文叫stage, 或index。一般存放在 ".git目录下" 下的index文件（.git/index）中，所以我们把暂存区有时也叫作索引（index）。
版本库：工作区有一个隐藏目录.git，这个不算工作区，而是Git的版本库。

在版本库中标记为 "index" 的区域是暂存区（stage, index），标记为 "master" 的是 master 分支所代表的目录树。 

"HEAD" 实际是指向 master 分支的一个"游标"。命令中出现 HEAD 的地方可以用 master 来替换。 

objects 标识的区域为 Git 的对象库，实际位于 ".git/objects" 目录下，里面包含了创建的各种对象及内容。

当对工作区修改（或新增）的文件执行"git add" 命令时，暂存区的目录树被更新，同时工作区修改（或新增）的文件内容被写入到对象库中的一个新的对象中，而该对象的ID被记录在暂存区的文件索引中。

当执行提交操作（git commit）时，暂存区的目录树写到版本库（对象库）中，master 分支会做相应的更新。即 master 指向的目录树就是提交时暂存区的目录树。 

当执行 "git reset HEAD" 命令时，暂存区的目录树会被重写，被 master 分支指向的目录树所替换，但是工作区不受影响。 

当执行 "git rm --cached <file>" 命令时，会直接从暂存区删除文件，工作区则不做出改变。

当执行 "git checkout ." 或者 "git checkout -- <file>" 命令时，会用暂存区全部或指定的文件替换工作区的文件。这个操作很危险，会清除工作区中未添加到暂存区的改动。 

当执行 "git checkout HEAD ." 或者 "git checkout HEAD <file>" 命令时，会用 HEAD 指向的 master 分支中的全部或者部分文件替换暂存区和以及工作区中的文件。这个命令也是极具危险性的，因为不但会清除工作区中未提交的改动，也会清除暂存区中未提交的改动。


                        checkout 
   ---------------------------------------------------
   |                                                 |
   |                    rm-cached                    |
   |          add                    commit          |
工作区  -------------->  暂存区  -------------->  版本库
   |    <--------------     |    <--------------     |
   |	  checkout          |     reset/checkout     |
   |                        |                        |
   ∨                        ∨                        ∨
   ---------------------------------------------------
                     status\relog\rm
###################################################Git 工作区、暂存区和版本库###################################################

##########################################################Git 创建仓库##########################################################
git init
Git使用git init命令来初始化一个Git仓库，Git的很多命令都需要在Git的仓库中运行，所以git init是使用Git的第一个命令。你可以在任何时候、任何目录中这么做，完全是本地化的。在执行完成git init命令后，Git仓库会生成一个.git目录，该目录包含了资源的所有元数据，其他的项目目录保持不变（不像SVN会在每个子目录生成.svn目录，Git只在仓库的根目录生成.git目录）。Git 的工作就是创建和保存你项目的快照及与之后的快照进行对比。

使用方法
使用当前目录作为Git仓库，我们只需使它初始化。
git init
该命令执行完后会在当前目录生成一个.git目录。
使用我们指定目录作为Git仓库。
git init newrepo

初始化后，会在newrepo目录下会出现一个名为.git的目录，所有有关此项目的快照数据都存放在这里。
如果当前目录下有几个文件想要纳入版本控制，需要先用git add命令告诉Git开始对这些文件进行跟踪，然后提交：
$ git add *.c
$ git add README
$ git commit -m '初始化项目版本'
以上命令将目录下以.c结尾及README文件提交到仓库中。
git add .提交（某些版本中）无法提交删除的东西；必须使用git add --all ；

git remote
添加远程库：要添加一个新的远程仓库，可以指定一个简单的名字，以便将来引用,命令格式如下：
git remote add [shortname] [url]
要查看当前配置有哪些远程仓库，可以用命令（执行时加上 -v 参数，你还可以看到每个别名的实际链接地址。）：
$ git remote
origin
$ git remote -v
origin    git@github.com:tianqixin/runoob-git-test.git (fetch)
origin    git@github.com:tianqixin/runoob-git-test.git (push)

git pull
使用git pull来从远程仓库"同步"代码，通常有三种方式；
git pull <远程主机名> <远程分支名>:<本地分支名>
git pull origin <remote_branch>：<local_branch>
git pull origin <remote_branch>
git pull
1.git pull origin <remote_branch>：<local_branch>
这种用法写起来最为繁琐，但最好理解：
场景：当本地的当前分支不是local_branch；
作用：将远程分支拉取到指定本地分支；
例如：当前分支是dev，但是你想把远程master”同步”到本地master，但又不想使checkout切换到master分支；
这时你就可以使用git pull origin master：master
2.git pull origin <remote_branch>
有了上面的例子，这种使用方法的场景和作用就好理解了：
场景：在当前分支上进行同步操作；
作用：将指定远程分支同步到当前本地分支；
3.git pull
这种写法最简单，也最常用，但是隐含的知识也是最多的；
场景：本地分支已经和想要拉取的分支建立了“关联”关系；
作用：拉取所有远程分支的新版本"坐标"，并同步当前分支的本地代码(具体根据关联分支而定)

git push
使用push时，我们要特别注意分支的名称和”关联分支"对于操作的影响
git push
git push origin <remote_branch>
git push origin <local_branch>：<remote_branch>
git push <远程主机名> <本地分支名>:<远程分支名>
1.git push
场景：当前分支已经有关联分支，并且关联分支与当前分支同名；
作用：将当前分支代码同步到远程同名分支；
2.git push origin <local_branch>
场景：同步指定分支(非当前分支)到远程分支,如果是当前分支则<local_branch>可以省略
作用："同步"指定的本地分支到远程关联同名分支；
3.git push origin <local_branch>：<remote_branch>
场景：将本地分支推送到远程不同名的分支；
作用：将指定的本地分支推送到指定的远程分支；（这两个分支并没有建立关联关系，且可以不同名）
首先git作为支持分布式版本管理的工具，它管理的库（repository）分为本地库、远程库。

注：
git commit操作的是本地库，git push操作的是远程库。
git commit是将本地修改过的文件提交到本地库中。
git push是将本地库中的最新信息发送给远程库。
区分本地commit和服务器的push的原因:
因为如果本地不commit的话，修改的纪录可能会丢失。
而有些修改当前是不需要同步至服务器的，所以什么时候同步过去由用户自己选择。什么时候需要同步再push到服务器

git clone
我们使用 git clone 从现有 Git 仓库中拷贝项目（类似 svn checkout）。
克隆仓库的命令格式为： 
git clone <repo>
如果我们需要克隆到指定的目录，可以使用以下命令格式：
git clone <repo> <directory>
参数说明：
repo:Git 仓库。
directory:本地目录。
比如，要克隆 Ruby 语言的 Git 代码仓库 Grit，可以用下面的命令： 
$ git clone git://github.com/schacon/grit.git
执行该命令后，会在当前目录下创建一个名为grit的目录，其中包含一个 .git 的目录，用于保存下载下来的所有版本记录。
如果要自己定义要新建的项目目录名称，可以在上面的命令末尾指定新的名字：
$ git clone git://github.com/schacon/grit.git mygrit
git clone -b 分支名称 git远程仓库地址
如果不指定，默认克隆master的代码到本地仓库。


##########################################################Git 创建仓库##########################################################

##########################################################关联远程仓库##########################################################
什么是"关联"分支?
首先我们先使用git branch -vv 查看一下目前分支的“关联”情况；
$ git branch -vv
* dev    1a1b215 [origin/dev] Merge branch 'master' of https://github.com/jinxintang/gitTest into dev
  master a09fdc4 [origin/master] create pull 
可以看到我们的本地的dev关联的是远程(origin)的dev，本地的master关联的是远程(origin)的master;那么这种关联是如何建立、是否可以修改呢；
配置本地分支与远程分支的三种方法：
1.检出时建立关联关系：从服务器上拉取特定分支的时候，可以建立关联关系。git checkout -b dev origin/dev 检出的分支会自动关联到该远程分支
这种使用的前提：检出的本地分支必须和远程分支同名；
如：git checkout -b dev origin/dev 这时会建立关联关系
但：git checkout -b dev origin/master 就不会建立关联关系；
2.push时配置关联关系：只使用git push后并不会建立本地分支和远程分支的关联关系。如果想要在push时建立关联关系，需要添加参数“--set-upstream”例如：git push --set-upstream origin dev 推送到远程dev分支并建立关联关系;或者使用简写git push -u origin dev
  方法一：
  1. 到github上在仓库Clone or download下拉列表中找到以git@github.com:开头的仓库SSH地址并复制（因为HTTPS较慢，一般用SSH地址）
  2. 在本地执行命令：
  git remote add origin 你复制的地址
  注意：如果远程仓库中有文件，本地第一次push之前需要执行：git pull origin master
  3. 执行关联命令：
  git push -u origin master
  注意：如果需要重新关联一个origin需要执行命令：
  git remote rm orgin
  git remote add origin xxxxx
  git push -u origin master
  方法二：
  1. 到github上在仓库Clone or download下拉列表中找到以git@github.com:开头的仓库SSH地址并复制（因为HTTPS较慢，一般用SSH地址）
  2. 在本地执行命令：
  git clone 你复制的地址
  该方法比较省力，省去了执行命令git remote add origin和git push -u origin master
  但如果重新关联的话还是要用到上面2条命令的
3.更改git/config文件：git branch --set-upstream-to=<remote_branch>
无论使用上述那种方法，本地分支和远程分支的“关联”最终都会写到config文件；注：本项目的配置信息存放目录：项目所在目录/.git/config
关联分支：在git中表现为upstream,无论是使用push -u 或是 git branch --set-upstream-to方法，均会将这种对应关系写入.git/config配置文件，
如果一个本地分支没有关联分支，则无法执行git push或git pull指令；（但是可以使用git pull origin <remote_branch>、git push origin <remote_branch>等）
没有"关联"分支的情况下，使用push会先让你设置一个upstream branch.
##########################################################关联远程仓库##########################################################

#################################################删除git（gitlab，github）的分支#################################################
原理：推送一个空分支到远程分支，其实就相当于删除远程分支
方式一：通过代码删除
命令：$ git push origin 【空格】【冒号】【需要删除的分支名字】
比如我github上有master和feature分支，我现在想着删除feature分支，命令如下：
$ git push origin :feature
方式二：通过客户端删除（点击右边的删除按钮即可）
#################################################删除git（gitlab，github）的分支#################################################

########################################(non-fast-forward)pull、push没有共同历史的远程分支########################################
从字面上理解"non-fast-forward"，可以认为是"不能快速前进"。可以这样理解这个问题就是：别人上传到远程仓库后，你没有及时的同步（、拉取）到本地，但是你同时又添加了一些内容（提交），以致于你在提交时，它会检测到你之前从远程仓库拉取的时候的仓库状态和现在的不一样。于是，它为了安全起见拒绝了你的提交（然后就报了这个错误）。
push时报：non-fast-forward的解决问题
方法一：
先合并之前的历史，再进行提交——提倡使用
先把git的东西fetch到你本地然后merge后再push
$ git fetch origin master
$ git merge origin FETCH_HEAD 
先抓取远程仓库的更新到本地，然后与你的本地仓库合并，（如果有冲突就要解决冲突后再合并，冲突问题比较复杂，这里就不详细说了），这样就可以使远程仓库和你本地仓库一致了，然后就可以提交修改了。
方法二：
丢弃之前的历史，强推——谨慎使用
强推，即利用强覆盖方式用你本地的代码替代git仓库内的内容
$ git push -f  或者 $ git push --force
官方文档提示：This flag disables these checks, and can cause the remote repository to lose commits; use it with care.（即：此标志禁用这些检查，并可能导致远程存储库丢失提交；小心使用。）
pull时报：non-fast-forward的解决问题
方法一：
git pull origin master --allow-unrelated-histories --no-ff
方法二：
git配置过程中fatal:拒绝合并无关的历史
首先将远程仓库和本地仓库关联起来：
git branch --set-upstream-to=origin/master master
然后使用git pull整合远程仓库和本地仓库，
git pull --allow-unrelated-histories    (忽略版本不同造成的影响)
########################################(non-fast-forward)pull、push没有共同历史的远程分支########################################

##########################################################Git 基本操作##########################################################
基本快照
Git 的工作就是创建和保存你的项目的快照及与之后的快照进行对比。

git add
git add命令可将该文件添加到缓存，git status命令用于查看项目的当前状态。如我们添加以下两个文件：
$ touch README
$ touch hello.php
$ ls
README        hello.php
$ git status -s
?? README
?? hello.php
$ 
接下来我们执行git add命令来添加文件：
$ git add README hello.php 
现在我们再执行 git status，就可以看到这两个文件已经加上去了。
$ git status -s
A  README
A  hello.php
$ 
新项目中，添加所有文件很普遍，我们可以使用git add .命令来添加当前项目的所有文件。
现在我们修改 README 文件
$ vim README
在 README 添加以下内容：# Runoob Git 测试，然后保存退出。
再执行一下 git status：
$ git status -s
AM README
A  hello.php
"AM" 状态的意思是，这个文件在我们将它添加到缓存之后又有改动。改动后我们再执行git add命令将其添加到缓存中：
$ git add .
$ git status -s
A  README
A  hello.php
当你要将你的修改包含在即将提交的快照里的时候，需要执行git add。
git add 添加错文件的撤销方法
撤销操作
git status 先看一下add 中的文件 
git reset HEAD 如果后面什么都不跟的话 就是上一次add 里面的全部撤销了 
git reset HEAD XXX.html 就是对某个文件进行撤销了
git add .报错 warning: LF will be replaced by CRLF in 文件 ....
windows中的换行符为 CRLF，而在Linux下的换行符为LF
工作区的文件都应该用 CRLF 来换行。如果
改动文件时引入了 LF,提交改动时，git 会警告你哪些文件不是纯 CRLF 文件，但 git 不会擅自修改工作区的那些文件，而是对暂存区（我们对工作区的改动）进行修改。也因此，当我们进行 git add 的操作时，只要 git 发现改动的内容里有 LF 换行符，就还会出现这个警告。
解决方法：
git config --global core.autocrlf false //禁用自动转换

git status
git status 以查看在你上次提交之后是否有修改。
加-s参数表示获得简短的结果输出。如果没加该参数会详细输出内容：
$ git status
On branch master
Initial commit
Changes to be committed:
  (use "git rm --cached <file>..." to unstage)
    new file:   README
    new file:   hello.php

git diff
执行git diff来查看执行git status的结果的详细信息。
git diff命令显示已写入缓存与已修改但尚未写入缓存的改动的区别。git diff有两个主要的应用场景。
    尚未缓存的改动：git diff
    查看已缓存的改动： git diff --cached
    查看已缓存的与未缓存的所有改动：git diff HEAD
    显示摘要而非整个 diff：git diff --stat
git status显示你上次提交更新后的更改或者写入缓存的改动， 而git diff一行一行地显示这些改动具体是啥。

git commit
使用git add命令将想要快照的内容写入缓存区，而执行git commit将缓存区内容添加到仓库中。
写入缓存，并提交所有改动。使用 -m 选项以在命令行中提供提交注释：
$ git commit -m '第一次版本提交'
记录了快照后再执行git status:
$ git status
# On branch master
nothing to commit (working directory clean)
以上输出说明我们在最近一次提交之后，没有做任何改动，是一个"working directory clean：干净的工作目录"。
如果你没有设置-m选项，Git会尝试为你打开一个编辑器以填写提交信息。 如果Git在你对它的配置中找不到相关信息，默认会打开vim。
如果觉得git add提交缓存的流程太过繁琐，Git也允许你用-a选项跳过这一步。命令格式如下：
git commit -a 例如：先修改文件内容；再执行以下命令：git commit -am '修改文件'

Git 修改已提交的commit注释
修改最后一次注释
如果你只想修改最后一次注释（就是最新的一次提交），那好办：
git commit --amend
出现有注释的界面（你的注释应该显示在第一行）， 输入i进入修改模式，修改好注释后，按Esc键 退出编辑模式，输入:wq保存并退出。ok，修改完成。
修改之前的注释
修改之前的某次注释
1.输入：git rebase -i HEAD~2
最后的数字2指的是显示到倒数第几次 比如这个输入的2就会显示倒数的两次注释（最上面两行）
2.你想修改哪条注释 就把哪条注释前面的pick换成edit。方法就是上面说的编辑方式：i---编辑，把pick换成edit---Esc---:wq.
3.然后：（接下来的步骤Terminal会提示）git commit --amend
4.修改注释，保存并退出后，输入：git rebase --continue
其实这个原理我的理解就是先版本回退到你想修改的某次版本，然后修改当前的commit注释，然后再回到本地最新的版本

git reset HEAD
git reset HEAD 命令用于取消已缓存的内容。
例如：git reset HEAD hello.php  取消hello.php文件的缓存
现在执行git commit，只会将hello.php文件以为的文件的改动提交。
如要提交hello.php的修改可以使用如下命令：git commit -am '修改 hello.php 文件'
简而言之，执行git reset HEAD用来取消之前git add添加的但不希望包含在下一提交快照中的缓存。
git commit时报错：
Your branch is ahead of 'origin/master' by 3 commits.
git push origin：
If you work in another way and your local changes should be pushed then just git push origin assuming origin is your remote
git reset --hard origin/master：
If your local changes are bad then just remove them or reset your local master to the state on remote git reset --hard origin/master
git reset --hard origin/master
表示回退至远程分支中的最新版本
git reset --hard origin/master~1
表示回退至远程分支中的倒数第二个版本
git reset --hard origin/master~2
表示回退至远程分支中的倒数第二个版本
当远程仓库的代码的版本比本地仓库代码的版本要新的时候，通过git pull后者git fetch更新代码
当本地仓库的代码的版本比远程仓库代码的版本要新的时候，可以通过git reset --hard origin/master命令将本地仓库的版本回退至远程分支中的某一个版本

git rm
如果只是简单地从工作目录中手工删除文件，运行git status时就会在Changes not staged for commit的提示。
要从Git中移除某个文件，就必须要从已跟踪文件清单中移除，然后提交。可以用以下命令完成此项工作
git rm <file>
如果删除之前修改过并且已经放到暂存区域的话，则必须要用强制删除选项 -f
git rm -f <file>
如果把文件从暂存区域移除，但仍然希望保留在当前工作目录中，换句话说，仅是从跟踪清单中删除，使用 --cached 选项即可
git rm --cached <file>

git mv
git mv命令用于移动或重命名一个文件、目录、软连接。
例如：git mv README  README.md
##########################################################Git 基本操作##########################################################

##########################################################Git 分支管理##########################################################
分支意味着你可以从开发主线上分离开来，然后在不影响主线的同时继续工作。

创建分支命令：
git branch (branchname)

切换分支命令:（当你切换分支的时候，Git会用该分支的最后提交的快照替换你的工作目录的内容，所以多个分支不需要多个目录。）
git checkout (branchname)
git checkout -b (branchname)命令来创建新分支并立即切换到该分支下，从而在该分支中操作

列出分支基本命令：
没有参数时，git branch 会列出你在本地的分支。
git branch
加上-a参数可以查看远程分支
git branch -r
加上-a参数可以查看本地分支和远程分支，远程分支会用红色表示出来（如果你开了颜色支持的话）
git branch -a

git checkout (branch)
切换到我们要修改的分支。

重命名当前分支
git branch -m dev_zhangcz dev
dev_zhangcz ===> dev

删除本地分支
git branch -d dev
删除分支时报：error: The branch 'dev' is not fully merged.
原因：XXX分支有没有合并到当前分支的内容
解决方法：使用大写的D 强制删除 git branch -D XXX

删除远程分支
git push origin :<branchName>
git push origin --delete dev（在git v1.7.0之后的另一种远程删除方式）

合并分支命令:
git merge 

查看冲突文件：
git status（输出的命令很详细，但有些繁琐）
git status -s（以精简的方式显示文件状态）
git status -s 的状态返回值总结：
A: 你本地新增的文件（服务器上没有）
C: 文件的一个新拷贝
D: 你本地删除的文件（服务器上还在）
M: 文件的内容或者mode被修改了
R: 文件名被修改了
T: 文件的类型被修改了
U: 文件没有被合并(你需要完成合并才能进行提交)
X: 未知状态
##########################################################Git 分支管理##########################################################

##########################################################Git 提交历史##########################################################
Git查看提交历史
在使用Git提交了若干更新之后，又或者克隆了某个项目，想回顾下提交历史，我们可以使用git log命令查看。

git log命令列出历史提交记录。
$ git log

可以用 --oneline选项来查看历史记录的简洁的版本。
$ git log --oneline

还可以用 --graph 选项，查看历史中什么时候出现了分支、合并。以下为相同的命令，开启了拓扑图选项：
$ git log --oneline --graph

也可以用 --reverse 参数来逆向显示所有日志。
$ git log --reverse --oneline

如果只想查找指定用户的提交日志可以使用命令：git log --author,例如，比方说我们要找Git源码中Linus提交的部分：
$ git log --author=Linus --oneline -5

如果你要指定日期，可以执行几个选项：--since和--before，但是你也可以用--until和--after。
例如，如果我要看Git项目中三周前且在四月十八日之后的所有提交，我可以执行这个（我还用了--no-merges选项以隐藏合并提交）： 
$ git log --oneline --before={3.weeks.ago} --after={2010-04-18} --no-merges
 
##########################################################Git 提交历史##########################################################

############################################################Git 标签############################################################
列出标签
$ git tag
如果只对特定的标签感兴趣，可以使用模式匹配查找，如：
$ git tag -l 'v1.8.5*'

打轻量标签（打轻量标签很简单，只需要一个标签名字，而不需要任何额外的信息）
$ git tag v1.4-lw

打附注标签（创建附注标签，则需要增加-a参数表明它是一个附注标签，还需要增加-m参数指定信息）
$ git tag -a v1.4 -m 'version 1.4'

查看此版本所修改的内容
$ git show v1.4

后期打标签（如果不想对当前提交节点打标签，而是想对过去提交节点打标签，那么就可以使用后期打标签功能。）
假设我们现在的提交历史是这样子的：
$ git log --pretty=oneline
15027957951b64cf874c3557a0f3547bd83b3ff6 Merge branch 'experiment'
a6b4c97498bd301d84096da251c98a07c7723e65 beginning write support
0d52aaab4479697da7686c15f77a3d64d9165190 one more thing
6d52a271eda8725415634dd79daabbc4d9b6008e Merge branch 'experiment'
0b7434d86859cc7b8c3d5e1dddfed66ff742fcbc added a commit function
4682c3261057305bdd616e23b64b0857d832627b added a todo file
166ae0c4d3f420721acbb115cc33848dfcc2121a started write support
9fceb02d0ae598e95dc970b74767f19372d61af8 updated rakefile
964f16d36dfccde844893cac5b347e7b3d44abbc commit the todo
8a5cbc430f1a9c3d00faaeffd07798508422908a updated readme
我们想要对updated rakefile这次提交打标签，那么我们可以记录下它的commit-hash，即为：9fceb02d0ae598e95dc970b74767f19372d61af8
然后，使用如下这种语法：
$ git tag -a v1.2 9fceb02d0ae598e95dc970b74767f19372d61af8
即可成功为那次提交创建标签了

共享标签（只针对当前分支里面的标签）
默认情况下，本地打的标签是包含推送到远程服务器上的，如果需要推送到远程服务器上，则需要使用：
$ git push origin <TagName>
如：git push origin v1.5，如果希望以此推送多个标签，则可以使用：
$ git push origin --tags
这样子它就会将远程服务器上不存在的本地标签都推送到远程服务器中

删除标签
如果要删除一个标签，则可以使用命令git tag -d <TagName>，如：
$ git tag -d v1.4-lw
但是，这不会删除远程服务器中的标签，如果希望这种删除同步到远程服务器中，则需要使用git push <remote> :refs/tags/<TagName>这种语法，示例如下：
$ git push origin :refs/tags/v1.4-lw

检出标签:
git checkout <tagName> -b <branchName>
根据commitid检出代码:
git checkout <commitid> -b <branchName>
注意：如果通过标签或者commitid检出代码不指定branchName的话就会使HEAD处于detached状态（游离状态）。
############################################################Git 标签############################################################

################################################You are in 'detached HEAD' state################################################
什么是 HEAD
Git中的HEAD可以理解为一个指针，我们可以在命令行中输入cat .git/HEAD 查看当前HEAD 指向哪儿，一般它指向当前工作目录所在分支的最新提交。
当使用git checkout < branch_name>切换分支时，HEAD会移动到指定分支。
但是如果使用的是git checkout<commit id>，即切换到指定的某一次提交，HEAD就会处于detached状态（游离状态）
HEAD 游离状态的利与弊
HEAD 处于游离状态时，我们可以很方便地在历史版本之间互相切换，比如需要回到某次提交，直接checkout对应的commit id或者tag名即可。
它的弊端就是：在这个基础上的提交会新开一个匿名分支！
也就是说我们的提交是无法可见保存的，一旦切到别的分支，游离状态以后的提交就不可追溯了（即丢失）。
解决办法就是新建一个分支保存游离状态后的提交。
################################################You are in 'detached HEAD' state################################################

https://www.jianshu.com/p/55b6720264ee
https://blog.csdn.net/luoweile/article/details/89792133
https://blog.csdn.net/weixin_41287260/article/details/89742151



git pull和git fetch的区别：
https://blog.csdn.net/weixin_41975655/article/details/82887273
git：FETCH_HEAD
FETCH_HEAD： 是一个版本链接，记录在本地的一个文件中，指向着目前已经从远程仓库取下来的分支的末端版本。

举例说明：将远程origin仓库的xx分支合并到本地的yy分支。
git fetch origin xx
git checkout yy
git merge FETCH_HEAD
https://blog.csdn.net/weixin_33910434/article/details/86200097
https://ruphi.cn/archives/382/


初学git，请问各位大虾，为啥有的github上连接可以直接git clone下来 但是有的就要把ssh key添加到git管理里才能git clone呢？  github上的不都是开源的吗？  能详细解释吗
https://www.oschina.net/question/2461808_2164598
我想，你是不是想用ssh的方式clone别人的项目；这个时候报
Permission denied (publickey).
fatal: Could not read from remote repository.
之类的错误，这是因为git clone相当于在本地建一个仓库，同时把这个仓库与远程仓库绑定起来，这个时候就需要校验你对于远程仓库是否有写权限，而ssh是基于密钥验证的，所以就会报错，
所以如果你想clone别人的项目，1、要么fork一份到自己的账户中，这样就可以用ssh的方式clone项目到本地（前提是ssh密钥需要存到自己账户中），2、要么就用https的方式clone吧
