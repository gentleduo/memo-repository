#########################################################JRE、JDK、JVM#########################################################
JVM ：英文名称（Java Virtual Machine），就是我们耳熟能详的 Java 虚拟机。它只认识 xxx.class 这种类型的文件，它能够将 class 文件中的字节码指令进行识别并调用操作系统向上的 API 完成动作。所以说，jvm 是 Java 能够跨平台的核心，具体的下文会详细说明。
JRE ：英文名称（Java Runtime Environment），我们叫它：Java 运行时环境。它主要包含两个部分，jvm 的标准实现和 Java 的一些基本类库。它相对于 jvm 来说，多出来的是一部分的 Java 类库。
JDK ：英文名称（Java Development Kit），Java 开发工具包。jdk 是整个 Java 开发的核心，它集成了 jre 和一些好用的小工具。例如：javac.exe，java.exe，jar.exe 等。
这三者的关系是：一层层的嵌套关系。JDK>JRE>JVM。
1) 电脑在装完jdk后会有两个jre：
C:\Program Files\Java\jdk1.8.0_144\jre
C:\Program Files\Java\jre1.8.0_144
这两个不同版本的jre相互之间有什么联系吗？答案是：没有联系。甚至准确的来说，它俩是一样的，无论是用哪一个都是可以的。
在jdk的bin目录下，基本上都是一些可执行文件，并且它们还不大。其实这些可执行文件只是外层的一层封装而已，这样的目的是避免输入的命令过长。例如javac.exe内部调用的其实是JDK中lib目录中的tools.jar中com.sun.tools.javac.Main类，也就是说这些工具只是入口而已。而实际上它们本身又都是由Java编写的，所以在jdk目录下的jre既提供了这些工具的运行时环境，也提供了我们编写完成的Java程序的运行时环境。
所以，很明显，jdk是我们的开发工具包，它集成了jre，因此我们在安装jdk的时候可以选择不再安装jre而直接使用jdk中的jre运行我们的Java程序。（但是大部分人都默认将两个都装上了）。但是如果你的电脑不是用来开发Java程序的，而仅仅是用来部署和运行Java程序的，那么完全可以不用安装jdk，只需要安装jre即可。
2) Java为什么能跨平台，实现一次编写，多处运行？
Java能够跨平台运行的核心在于JVM。不是Java能够跨平台，而是它的jvm能够跨平台。我们知道，不同的操作系统向上的API肯定是不同的，那么如果我们想要写一段代码调用系统的声音设备，就需要针对不同系统的API写出不同的代码来完成动作。
而Java引入了字节码的概念，jvm只能认识字节码，并将它们解释到系统的API调用。针对不同的系统有不同的jvm实现，有Linux版本的jvm实现，也有Windows版本的jvm实现，但是同一段代码在编译后的字节码是一样的。引用上面的例子，在JavaAPI层面，我们调用系统声音设备的代码是唯一的，和系统无关，编译生成的字节码也是唯一的。但是同一段字节码，在不同的jvm实现上会映射到不同系统的API调用，从而实现代码的不加修改即可跨平台运行。
#########################################################JRE、JDK、JVM#########################################################

###################################################Java字符的编码解码与乱码###################################################
一幅图说尽Java编码问题
                         字符"中"的三种形态：
形状                            数字                                 字节
  |                               |                                    |
  |                               |                                    |
  |                               |                                    |
  ∨                               |                                    |
显示设备                         JVM                                 存储设备
          从数字到形状       char c= '中'   编码:从数字到字节数组  UTF-8:e4b8ad
             字体库             或者       --------------------->  UTF-16BE:4e2d
  中   <------------------  char c= 0x4e2d                         UTF-16LE:2d4e
                                或者       <---------------------  UTF-16:feff4e2d
						    char c= 20013  解码:从字节数组到数字   GBK:d6d0
  字符集合:                  编码字符集:                            字符编码方案:
一组形状的集合            给形状一个数字编码                    将编码映射到字节数组

字符有三种形态：形状（显示在显示设备上）、数字（运行于JVM中，Java统一为unicode编码）和字节数组（不同的字符集有不同的映射方案）。 
如此就可以明白四个重要的实体概念了（这四个概念来自于《Java NIO》一书）：
字符集合（Character set）：
是一组形状的集合，例如所有汉字的集合，发明于公元前，发明者是仓颉。它体现了字符的“形状”，它与计算机、编码等无关。
编码字符集（Coded character set）：
是一组字符对应的编码（即数字），为字符集合中的每一个字符给予一个数字。例如最早的编码字符集ASCII，发明于1967年。再例如Java使用的unicode，发明于1994年（持续更新中）。由于编码字符集为每一个字符赋予一个数字，因此在java内部，字符可以认为就是一个16位的数字，因此以下方式都可以给字符赋值：
char c='中'
char c =0x4e2d
char c=20013
字符编码方案（Character-encoding schema）：
将字符编码（数字）映射到一个字节数组的方案，因为在磁盘里，所有信息都是以字节的方式存储的。因此Java的16位字符必须转换为一个字节数组才能够存储。例如UTF-8字符编码方案，它可以将一个字符转换为1、2、3或者4个字节。
字符集（Charset）：
一般认为，编码字符集和字符编码方案合起来被称之为字符集（Charset），这是一个术语，要和前面的字符集合（Character set）区分开。

转换的类型
从数字到形状—字体库
从JVM中的字符编码，到屏幕上显示的形状。这个转换是在字体库的帮助下完成的。例如windows默认的一些汉字字体，在Java中运行时是一个个的数字编码，例如0x4e2d，通过查找字体库，得到一个形状“中”，然后显示在屏幕上。

从数字到字节数组—编码
从JVM中的编码，到字节数组，这个转换被称之为编码。转换的目的是为了存储，或者发送信息。同一个数字，例如0x4e2d，采用不同的字符集进行编码，能得到不同的字节数组。如图中所见。至于具体的UTF-8、GBK、UTF-16等字符集的历史渊源，具体转换方式都有很多的资料可以查询。
编码的例子代码如下：
第一种方法，使用String的getBytes方法：
private static byte[] encoding1(String str, String charset) throws UnsupportedEncodingException {
    return str.getBytes(charset);
}
第二种方法，使用Charset的encode方法：
private static byte[] encoding2(String str, String charset) {
    Charset cset = Charset.forName(charset);
    ByteBuffer byteBuffer = cset.encode(str);
    byte[] bytes = new byte[byteBuffer.remaining()];
    byteBuffer.get(bytes);
    return bytes;
}
注意：Charset、ByteBuffer以及后文中提到的CharBuffer类都是Java NIO包中的类，具体使用方法可参考《Java NIO》一书。

从字节数组到数字—解码
从一个字节数组，到一个代表字符的数字，这个转换被称之为解码。解码一般是将从磁盘或者网络上得到的信息，转换为字符或字符串。注意解码时一定要指定字符集，否则将会使用默认的字符集进行解码。如果使用了错误的字符集，则会出现乱码。
解码的例子代码如下：
第一种方法，使用String的构造函数：
private static String decoding1(byte[] bytes,String charset) throws UnsupportedEncodingException {
    String str = new String(bytes, charset);
    return str;
}
第二种方法，使用Charset的decode方法：
private static String decoding2(byte[] bytes, String charset) {
    Charset cset = Charset.forName(charset);
    ByteBuffer buffer = ByteBuffer.wrap(bytes);
    CharBuffer charBuffer = cset.decode(buffer);
    return charBuffer.toString();
}

默认的字符集
乱码问题都是因为在编码或者解码时使用了错误的字符集导致的。如果不能明白什么是默认的字符集，则很有可能导致乱码。Java的默认字符集，可以在两个地方设定，一是执行java程序时使用-Dfile.encoding参数指定，例如-Dfile.encoding=UTF-8就指定默认字符集是UTF-8。二是在程序执行时使用Properties进行指定，如下：
private static void setEncoding(String charset) {
    Properties properties = System.getProperties();
    properties.put("file.encoding",charset);
    System.out.println(properties.get("file.encoding"));
}
注意，这两种方法如果同时使用，则程序开始时使用参数指定的字符集，在Properties方法后使用Properties指定的字符集。
如果这两种方法都没有使用，则使用操作系统默认的字符集。例如中文版windows 7的默认字符集是GBK。
默认字符集的优先级如下：
1.程序执行时使用Properties指定的字符集；
2.java命令的-Dfile.encoding参数指定的字符集；
3.操作系统默认的字符集；
4.JDK中默认的字符集，我跟踪了JDK1.8的源代码，发现其默认字符集指定为ISO-8859-1。

JDK支持的字符集
Charset类提供了一个方法可以列出当前JDK所支持的所有字符集，代码如下：
private static void printAvailableCharsets() {
    Map<String ,Charset> map = Charset.availableCharsets();
    System.out.println("the available Charsets supported by jdk:"+map.size());
    for (Map.Entry<String, Charset> entry :
            map.entrySet()) {
        System.out.println(entry.getKey());
    }
}
本测试机使用的JDK为1.8，列出的字符集多达169个。

乱码
如何产生乱码
从上述章节可知，字符的形态有三种，分别是“形状”、“数字”和“字节”。字符的三种形态之间的转换也有三类：从数字到形状，从数字到字节（编码），从字节到数字（解码）。从数字到形状不会产生乱码，乱码就产生在编码和解码的时候。仔细想来，编码也是不会产生乱码的，因为从数字到字节（指定某个字符集）一定能够转换成功，即使某字符集中不包含该数字，它也会用指定的字节来代替，并在转换时给出指示。如此一来，乱码只会产生在解码时：例如使用某字符集A编码的字节，使用字符集B来进行解码，而A和B并不兼容。这样一来，解码产生的数字（字符编码）就是错误的，那么它显示出来也是错误的，典型的乱码例子如下（使用UTF-8编码，使用GBK解码）：
private static void generateGrabledCode() throws UnsupportedEncodingException {
    String str = "中国";
    byte[] bytes = str.getBytes("UTF-8");
    str = new String(bytes, "GBK");
    System.out.println(str);
}

再论Unicode、UTF和GBK
弄清楚了以上的概念和例子，再来看unicode、UCS-2、UCS-4、UTF-8、UTF-16、Big Endian、Little Endian、GBK这些名词就有了辨别的好方法了。
再复习一遍概念：
字符集合（Character set）：是一组形状的集合，一般存储于字库中。
编码字符集（Coded character set）：是一组字符对应的编码（即数字），为字符集合中的每一个字符给予一个数字。
字符编码方案（Character-encoding schema）：将字符编码（数字）映射到一个字节数组的方案。
字符集（Charset）：是编码字符集和字符编码方案的组合。

Unicode是一个编码字符集
Unicode的全称是“Universal Multiple-Octet Coded Character Set”，通用多字节编码字符集，简写为UCS。
因此我们知道：Unicode规定了一组字符对应的编码。恰好这组字符就是全人类目前所有的字符。
那么UCS-2和UCS-4是什么意思？UCS-2是指用两个字节对应一个字符的编码字符集；UCS-4则是指用四个字节对应一个字符的编码字符集。你可以认为，目前为止Unicode有两个具体的编码字符集，UCS-2和UCS-4。
Java使用的是UCS-2，即我们前面提到的，一个字符由一个16位的二进制数（2个字节）表示。

UTF是字符编码方案
看过很多文章，往往混淆Unicode和UTF，说不清它们之间的区别，用本文的概念很容易就解释清楚了。
Unicode是某种编码字符集（目前包括UCS-2和UCS-4两种），而UTF则是字符编码方案，就是将字符编码（数字）映射到一个字节数组的方案。UTF中的U是指Unicode，也就是将Unicode编码映射到字节数组的方案。目前UTF包括UTF-7、UTF-8、UTF-16和UTF-32，后面的数字代表转换时最小的位数。例如UTF-8就是用几个8位二进制数来代表一个Unicode编码。而UTF-15就是用几个16位二进制数来代表一个Unicode编码。

Big Endian和Little Endian是字节序
字节序就是数据在内存中存放的顺序，多于一个字节的数据在内存中存放时有两种选择，即Big Endian和Little Endian。
Little-Endian就是低位字节排放在内存的低地址端，高位字节排放在内存的高地址端。
Big-Endian就是高位字节排放在内存的低地址端，低位字节排放在内存的高地址端。
Big Endian和Little Endian和芯片类型以及操作系统都有关系。但是由于Java是平台无关的，所以Java被设计为Big Endian的。但是当Java中的字符进行编码时，就要注意其字节序了。
例如UTF-16字符编码方案就分为UTF-16BE和UTF-16LE。

GBK是一个字符集
GBK同时包含编码字符集和字符编码方案。GBK编码了目前使用的大多数汉字（编码字符集），它将每一个汉字映射为两个字节，对于英文和数字，它则使用与ASCII相同的一个字节编码（字符编码方案）。
###################################################Java字符的编码解码与乱码###################################################

#################################java 动态代理深度学习(Proxy,InvocationHandler),含$Proxy0源码#################################
一.相关类及其方法:
java.lang.reflect.Proxy
Proxy 提供用于创建动态代理类和实例的静态方法.
newProxyInstance()
返回一个指定接口的代理类实例，该接口可以将方法调用指派到指定的调用处理程序

java.lang.reflect.InvocationHandler,
InvocationHandler 是代理实例的调用处理程序 实现的接口。
invoke()
在代理实例上处理方法调用并返回结果。在与方法关联的代理实例上调用方法时，将在调用处理程序上调用此方法。

二.源代码:
被代理对象的接口及实现类:
package com.ml.test;
public interface Manager {
	public void modify();
}
package com.ml.test;
public class ManagerImpl implements Manager {
	public void modify() {
		System.out.println("*******modify()方法被调用");
	}
}
业务代理类:
package com.ml.test;
import java.lang.reflect.InvocationHandler;
import java.lang.reflect.Method;
public class BusinessHandler implements InvocationHandler {
    //这个Object就是被代理的对象的实现类
	private Object object = null;
	public BusinessHandler(Object object) {
	   this.object = object;
	}
	//这个方法中的第一个参数没有用到，
	public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
		System.out.println("do something before method");
		//执行被代理的对象的method方法
		Object ret = method.invoke(this.object, args);
		System.out.println("do something after method");
		return ret;
	}
}
客户端类:
package com.ml.test;
import java.lang.reflect.Proxy;
public class Client {
	public static void main(String[] args) {
		// 元对象(被代理对象)
		ManagerImpl managerImpl = new ManagerImpl();
		// 业务代理类
		BusinessHandler securityHandler = new BusinessHandler(managerImpl);
		// 获得代理类($Proxy0 extends Proxy implements Manager)的实例.
		Manager managerProxy = (Manager) Proxy.newProxyInstance(managerImpl
		 .getClass().getClassLoader(), managerImpl.getClass()
		 .getInterfaces(), securityHandler);
		managerProxy.modify();
	}
}
三.执行结果:
do something before method
*******modify()方法被调用
do something after method
四.机制分析:
Proxy.newProxyInstance(ClassLoader loader, Class<?>[] interfaces, InvocationHandler h)做了以下几件事.
(1)根据参数loader和interfaces调用方法getProxyClass(loader, interfaces)创建代理类$Proxy. $Proxy0类实现了interfaces的接口,并继承了Proxy类.具体流程如下：
Proxy静态方法newProxyInstance调用getProxyClass，getProxyClass中再调用getProxyClass0；getProxyClass0方法里其实直接取proxyClassCache缓存，proxyClassCache是一个代理类的缓存变量，如果这个缓存里有这个代理类，就直接返回代理类，如果没有，就会通过ProxyClassFactory创建代理对象。ProxyClassFactory是Proxy里的一个内部类，用来生成代理类，apply()方法最后调用ProxyGenerator.generateProxyClass()方法来完成生成字节码的操作，
(2)实例化$Proxy0并在构造方法中把BusinessHandler传过去,接着$Proxy0调用父类java.lang.reflect.Proxy的构造器,为h赋值,如下:
class Proxy{
	InvocationHandler h=null;
	protected Proxy(InvocationHandler h) {
		this.h = h;
	}
   ...
}
$Proxy0类的源码：
import java.lang.reflect.InvocationHandler;
import java.lang.reflect.Method;
import java.lang.reflect.Proxy;
import java.lang.reflect.UndeclaredThrowableException;

public class $Proxy0 extends Proxy implements Manager {
	
	private static Method m1;
	private static Method m0;
	private static Method m3;
	private static Method m2;
	
	static {
		try {
			m1 = Class.forName("java.lang.Object").getMethod("equals",
					new Class[] { Class.forName("java.lang.Object") });
			m0 = Class.forName("java.lang.Object").getMethod("hashCode", new Class[0]);
			m3 = Class.forName("com.ml.test.Manager").getMethod("modify", new Class[0]);
			m2 = Class.forName("java.lang.Object").getMethod("toString", new Class[0]);
		} catch (NoSuchMethodException nosuchmethodexception) {
			throw new NoSuchMethodError(nosuchmethodexception.getMessage());
		} catch (ClassNotFoundException classnotfoundexception) {
			throw new NoClassDefFoundError(classnotfoundexception.getMessage());
		}
	}

	public $Proxy0(InvocationHandler invocationhandler) {
		super(invocationhandler);
	}

	@Override
	public final boolean equals(Object obj) {
		try {
			return ((Boolean) super.h.invoke(this, m1, new Object[] { obj })).booleanValue();
		} catch (Throwable throwable) {
			throw new UndeclaredThrowableException(throwable);
		}
	}

	@Override
	public final int hashCode() {
		try {
			return ((Integer) super.h.invoke(this, m0, null)).intValue();
		} catch (Throwable throwable) {
			throw new UndeclaredThrowableException(throwable);
		}
	}

	public final void modify() {
		try {
			super.h.invoke(this, m3, null);
			return;
		} catch (Error e) {
		} catch (Throwable throwable) {
			throw new UndeclaredThrowableException(throwable);
		}
	}

	@Override
	public final String toString() {
		try {
			return (String) super.h.invoke(this, m2, null);
		} catch (Throwable throwable) {
			throw new UndeclaredThrowableException(throwable);
		}
	}
}
接着把得到的$Proxy0实例强制转换成Manager.
当执行managerProxy.modify()方法时,就调用了$Proxy0类中的modify()方法.
在modify方法中,调用父类Proxy中的h的invoke()方法.
即InvocationHandler.invoke();
#################################java 动态代理深度学习(Proxy,InvocationHandler),含$Proxy0源码#################################

#######################################################java ThreadLocal#######################################################
ThreadLocal的实现原理
Thread类中有两个变量threadLocals和inheritableThreadLocals，二者都是ThreadLocal内部类ThreadLocalMap类型的变量，通过查看ThreadLocal的内部类ThreadLocalMap可以发现实际上它类似于一个HashMap。在默认情况下，每个线程中的这两个变量都为null。只有当线程第一次调用ThreadLocal的set或者get方法的时候才会创建他们（后面我们会查看这两个方法的源码）。每个线程的本地变量不是存放在ThreadLocal实例中，而是放在调用线程的ThreadLocals变量里面（前面也说过，该变量是Thread类的变量）。也就是说，ThreadLocal类型的本地变量是存放在具体的线程空间上，其本身相当于一个装载本地变量的工具壳，通过set方法将value添加到调用线程的threadLocals中，当调用线程调用get方法时候能够从它的threadLocals中取出变量。如果调用线程一直不终止，那么这个本地变量将会一直存放在他的threadLocals中，所以不使用本地变量的时候需要调用remove方法将threadLocals中删除不用的本地变量。
1、set方法源码
public void set(T value) {
    //(1)获取当前线程（正在运行的线程）
    Thread t = Thread.currentThread();
    //(2)获取当前线程的threadLocals变量(threadLocals的类型为ThreadLocal.ThreadLocalMap)
    ThreadLocalMap map = getMap(t);
    //(3)如果map不为null，就直接添加本地变量，key为当前ThreadLocal对象，值为添加的本地变量值
    if (map != null)
        map.set(this, value);
    //(4)如果map为null，说明首次添加，需要首先创建出对应的map
    else
        createMap(t, value);
}
在上面的代码中，(2)处调用getMap方法获得当前线程对应的threadLocals，该方法代码如下
ThreadLocalMap getMap(Thread t) {
    return t.threadLocals; //获取线程自己的变量threadLocals，并绑定到当前调用线程的成员变量threadLocals上
}
如果调用getMap方法返回值不为null，就直接将value值设置到threadLocals中（key为当前ThreadLocal对象，值为本地变量）；如果getMap方法返回null说明是第一次调用set方法（前面说到过，threadLocals默认值为null，只有调用set方法的时候才会创建map），这个时候就需要调用createMap方法创建threadLocals，该方法如下所示
void createMap(Thread t, T firstValue) {
    t.threadLocals = new ThreadLocalMap(this, firstValue);
}
createMap方法不仅创建了threadLocals，同时也将要添加的本地变量值添加到了threadLocals中。
2、get方法源码
在get方法的实现中，首先获取当前调用者线程，如果当前线程的threadLocals不为null，就直接返回当前线程绑定的本地变量值，否则执行setInitialValue方法初始化threadLocals变量。在setInitialValue方法中，类似于set方法的实现，都是判断当前线程的threadLocals变量是否为null，不为空则添加本地变量（这个时候由于是初始化，所以添加的值为null），为空则创建threadLocals变量，同样添加的值为null。
public T get() {
    //(1)获取当前线程
    Thread t = Thread.currentThread();
    //(2)获取当前线程的threadLocals变量
    ThreadLocalMap map = getMap(t);
    //(3)如果threadLocals变量不为null，就可以在map中查找到本地变量的值
    if (map != null) {
        ThreadLocalMap.Entry e = map.getEntry(this);
        if (e != null) {
            @SuppressWarnings("unchecked")
            T result = (T)e.value;
            return result;
        }
    }
    //(4)执行到此处，threadLocals为null，调用该更改初始化当前线程的threadLocals变量
    return setInitialValue();
}

private T setInitialValue() {
    //protected T initialValue() {return null;}
    T value = initialValue();
    //获取当前线程
    Thread t = Thread.currentThread();
    //以当前线程作为key值，去查找对应的线程变量，找到对应的map
    ThreadLocalMap map = getMap(t);
    //如果map不为null，就直接添加本地变量，key为当前线程，值为添加的本地变量值
    if (map != null)
        map.set(this, value);
    //如果map为null，说明首次添加，需要首先创建出对应的map
    else
        createMap(t, value);
    return value;
}
3、remove方法的实现
remove方法判断该当前线程对应的threadLocals变量是否为null，不为null就直接删除当前线程中指定的threadLocals变量
public void remove() {
   //获取当前线程绑定的threadLocals
    ThreadLocalMap m = getMap(Thread.currentThread());
    //如果map不为null，就移除当前线程中指定ThreadLocal实例的本地变量
    if (m != null)
        m.remove(this);
}
4、每个线程内部有一个名为threadLocals的成员变量，该变量的类型为ThreadLocal.ThreadLocalMap类型（类似于一个HashMap），其中的key为当前定义的ThreadLocal变量的this引用，value为我们使用set方法设置的值。每个线程的本地变量存放在自己的本地内存变量threadLocals中（即每个线程都有自己的threadLocals变量，类型为ThreadLocal.ThreadLocalMap，这个map中存放的key都是同一个ThreadLocal对象，但是value则是各个线程自己设置的值），如果当前线程一直不消亡，那么这些本地变量就会一直存在（所以可能会导致内存溢出），因此使用完毕需要将其remove掉。
#######################################################java ThreadLocal#######################################################

#####################################################JVM ClassLoader#####################################################
类装载工作由ClassLoader及其子类负责，ClassLoader是一个重要的Java执行时系统组件，它负责在运行时查找和装入Class字节码文件。JVM在运行时会产生三个ClassLoader：根装载器、ExtClassLoader（扩展类装载器）和AppClassLoader（系统类装载器）。其中，根装载器不是ClassLoader的子类，它使用C++编写，因此我们在Java中看不到它，根装载器负责装载JRE的核心类库，如JRE目标下的rt.jar、charsets.jar等。ExtClassLoader和AppClassLoader都是ClassLoader的子类。其中ExtClassLoader负责装载JRE目录ext中的JAR类包；AppClassLoader负责装载ClassPath路径下的类包。
启动类加载器（Bootstrap ClassLoader）：这个类加载器负责将存放在<JAVA_HOME>\lib目录中的。启动类加载器无法被Java程序直接引用，用户在编写自定义类加载器时，如果需要把加载请求委派给引导类加载器，那直接使用null代替即可。
扩展类加载器（Extension ClassLoader）：这个加载器由sun.misc.Launcher$ExtClassLoader实现，它负责加载<JAVA_HOME>\lib\ext目录中的，或者被java.ext.dirs系统变量所指定的路径中的所有类库，开发者可以直接使用扩展类加载器。
应用程序类加载器（Application ClassLoader）：这个类加载器由sun.misc.Launcher$AppClassLoader实现。由于这个类加载器是ClassLoader中的getSystemClassLoader()方法的返回值，所以一般也称它为系统类加载器。它负责加载用户类路径（ClassPath）上所指定的类库，开发者可以直接使用这个类加载器，如果应用程序中没有自定义自己的类加载器，一般情况下这个就是程序中默认的类加载器。
#####################################################JVM ClassLoader#####################################################

#############################################################JAR#############################################################
『JAR file』
Eclipse中以『JAR file』的形式exportjar包的时候，必须自己定义MANIFEST.MF或者手动修改MANIFEST.MF清单文件，才能通过java -jar运行。
该文件的“Main-Class”属性指定了程序的主类，“Class-Path”属性则指定了运行主类所依赖的外部类的路径。
MANIFEST.MF文件定义如下所示：
Manifest-Version: 1.0
Main-Class: com.Task
Class-Path: lib/dom4j-1.6.1.jar lib/jaxen-1.1-beta-7.jar
注意:
<1> manifest.mf文件最后一行必须是一个空行。
<2> lib/dom4j-1.6.1.jar和lib/jaxen-1.1-beta-7.jar之间用一个空格隔开。
<3>每个冒号后有一个空格。
具体流程：
<1>在eclipse中选择你要导出的类或者package，右击，选择Export子选项
<2>在弹出的对话框中，选择java文件---选择JAR file
<3>在JAR file后面的文本框中选择你要生成的jar包的位置以及名字
<4>注意在Export generated class files and resources和Export java source files and resources前面打上勾
<5>选择Manifest文件 （即：自己定义MANIFEST.MF然后选择Use existing manifest from workspace）
<6>将生成的jar文件和存放引用包的lib文件夹放在同一个目录下，最后点击生成的jar文件就可以成功运行了（生成的jar文件和依赖的外部类的jar文件分开存放，然后通过MANIFEST.MF文件中Class-Path指定的路径来引用依赖的外部类的路径）
还需要注意的是，Class-Path属性指定的类或jar包是本地的文件，不可以是远程访问的类或者JAR包文件中的JAR包，即不能是jar in jar；当然也就不能是本jar包中包含的jar包。要实现对jar in jar的引用，需要自定义相关代码来读取它们。『Runnable JAR file』之所以能够运行，就是因为Eclipse为我们提供了jar in jar loader，来帮助我们读取jar in jar。
注意如果引用的jar太多会，manifest.mf会出现line too long的问题，解决方法：
Class-Path: A.jar
  B.jar
  C.jar
  D.jar
  .....
从第二行起，在每行前面都加两个空格

『Runnable JAR file』
Extract required libraries into generated jar -> 提取需要的库(以解压的形式)放到生成的jar文件中
Package required libraries into generated jar -> 将需要的Jar库包放到生成的jar文件中（即：jar in jar的形式）
Copy required libraries into a sub-folder next to the generated jar -> 将需要的库拷贝到一个子文件夹并放在生成的jar文件旁边

可执行jar的classpath设置
如果使用了-jar选项，那么环境变量CLASSPATH和在命令行中指定的所有类路径都被JVM所忽略。
例如：java -jar -cp .:lib/* myjar.jar ；指定-jar后，该-cp参数将被忽略。
如果myjar.jar调用了其他的jar文件，有下面几种解决方案：
Java定义了三种级别的class,分别为BootStrap class,Extend Class,User class.
BootStrap class扩展方案
Java 命令行提供了如何扩展bootStrap级别class的简单方法.
-Xbootclasspath:完全取代基本核心的Java class 搜索路径,不常用,否则要重新写所有Java核心class
-Xbootclasspath/a:后缀在核心class搜索路径后面 常用.
-Xbootclasspath/p:前缀在核心class搜索路径前面 不常用,避免引起不必要的冲突
例： java –Xbootclasspath/a:/d:/myclass/account.jar; -jar yourself.jar(Window用;号隔开)
例： java –Xbootclasspath/a:/path/myclass/account.jar: -jar yourself.jar(Unix用:号隔开)
extend class 扩展方案
Java_extend_class 存放在{Java_home}\jre\lib\ext 目录下.当调用Java时,对扩展class路径的搜索是自动的.总会搜索的.这样,解决的方案就很简单了,将所有要使用的第三方的jar包都复制到ext 目录下.
User class扩展方案
当使用-jar执行可执行Jar包时,JVM将Jar包所在目录设置为codebase目录,所有的class搜索都在这个目录下开始.所以如果使用了其他第三方的jar包,一个比较可以接受的可配置方案,就是利用jar包的Manifest扩展机制.步骤如下
1.将需要的第三方的jar包,复制在同可执行jar所在的目录或某个子目录下.
比如:jar包在d:\crm\luncher.jar那么你可以把所有jar包复制到d:\crm目录下或d:\crm\lib 子目录下.
2.修改Manifest文件
在Manifest.mf文件里加入如下行
Class-Path:classes12.jar lib/class12.jar

运行jar文件的方法是：
java -jar xxx.jar
但是有时，我们希望运行里面的具体某个类，这时可以通过：(注意:java -cp可以运行非Runnable的JAR)
java -cp xxx.jar xxx.com.xxxx  它会找到这个类的main函数，开始执行
其中-cp命令是将xxx.jar加入到classpath，这样java class loader就会在这里面查找匹配的类。
例如我要运行的主函数在test2.jar中，而依赖的jdbc驱动在./lib目录下，所以利用java -cp运行的代码如下(windows下多个jar包之间使用分号；)：
java -cp .:lib/*:./test2.jar database.pack.QueryData
java命令直接运行class文件时候是以当前用户路径为基础，按照package指定的包路径转化为文件路径去搜索class文件的：
例如：类Main1的package名为Pack1，当前用户的路径为/home，那么必须在当前路径下建一个名为Pack1的目录然后将Main1.class放在此目录下（即class的目录为：/home/Pack1）只这样在/home目录下运行java Pack1.Main1才能执行成功。

总结：
java -jar运行时：环境变量CLASSPATH和在命令行中指定的所有类路径都被JVM所忽略，所以依赖的jar和Main-Class必须通过MANIFEST.MF配置
java -cp运行时：直接在-cp参数后面指定依赖的jar，再指定main函数

配置JAVA环境变量中CLASSPATH变量的作用
结论1：在没有配置CLASSPATH环境变量时，java命令在找class文件时是默认在当前目录下寻找的。
结论2：配置过CLASSPATH环境后，java命令是按照CLASSPATH变量中的路径来的寻找class文件的，这就是为什么CLASSPATH变量中配置没有当前目录时，即使当前目录中有class文件，java命令仍然不能正常运行的原因。
结论3：java执行class文件对package的路径是强依赖的。它在执行的时候会严格以当前用户路径为基础，按照package指定的包路径转化为文件路径去搜索class文件

使用jar命名编译java文件
======================>需要编译的java类中，import了其他java类
比如需要编译的类：BufferedStreamFileOperationMain中引入了com.pccc.risk.CommonUtils
由于java编译器会从目前的classpath中开始叠加包路径转化为文件路径后的路径中查找CommonUtils类，所以CommonUtils文件一定要放在classpath+包路径转化为文件路径后的文件夹中
例如CommonUtils放在D:\eclipse-workspace\riskdatacleaning\src\com\pccc\risk文件夹中，CommonUtils的包名为：com.pccc.risk，所以classpath必须设置为：D:\eclipse-workspace\riskdatacleaning\src
javac -encoding utf-8 -cp D:\eclipse-workspace\riskdatacleaning\src D:\eclipse-workspace\riskdatacleaning\src\com\pccc\risk\BufferedStreamFileOperationMain.java
另外：如果在java文件在同一目录下，比如A，B在同一目录下，A需要用到B的类，则可以使用比较简单的方式 javac A B或者javac *.java就行

======================>需要编译的java类中，import了其他jar
linux下，对于需要依赖的jar包使用-cp ，多个jar包之间使用冒号: java命令运行时注意.:
javac -cp  .:httpcore-4.4.1.jar:httpclient-4.4.1.jar:commons-logging-1.2.jar  TestIPMain.java
java -cp  .:httpcore-4.4.1.jar:httpclient-4.4.1.jar:commons-logging-1.2.jar  TestIPMain
windows下，对于需要依赖的jar包使用-cp ，多个jar包之间使用分号;java命令运行时注意.;
javac -cp  .;d:\javaTestIP\httpcore-4.4.1.jar;d:\javaTestIP\httpclient-4.4.1.jar;d:\javaTestIP\commons-logging-1.2.jar  TestIPMain.java
java -cp  .;d:\javaTestIP\httpcore-4.4.1.jar;d:\javaTestIP\httpclient-4.4.1.jar;d:\javaTestIP\commons-logging-1.2.jar  TestIPMain

jar命令打jar包
第一种方式 jar -cvf ./class2json.jar ./com
jar包中中META-INF/MANIFEST.MF是自动生成的，并没有额外的jar包以及主类，所以 java -jar class2json.jar 运行失败，因为找不到主类
第二种方式 jar cvfm class2json_1.jar ./META-INF/MANIFEST.MF com
其中META-INF/MANIFEST.MF是我们引入的，包括额外的jar包以及主类，所以 java -jar class2json.jar 运行成功
#############################################################JAR#############################################################

#########################################################class字节码及汇编代码输出#########################################################
查看class字节码文件
1、使用javac编译Java文件
2、使用javap -verbose查看class字节码文件
2.1 使用-g:none或-g:lines选项来取消或要求生成LineNumberTable
2.2 使用-g:none或-g:vars选项来取消或要求生成LocalVariableTable
例如:
cd src/thread/pack
javac VolatileExample.java
cd src
javap -verbose java thread.pack.VolatileExample

代码转换为汇编指令:
下载hsdis工具，链接如下；
https://sourceforge.net/projects/fcml/files/fcml-1.1.1/hsdis-1.1.1-win32-amd64.zip/download
下载完毕之后解压，将hsdis-amd64.dll与hsdis-amd64.lib两个文件放在%JAVA_HOME%\jre\bin\server路径下即可
跑main函数之前，加入如下虚拟机参数：
-server
-Xcomp
-XX:+UnlockDiagnosticVMOptions
-XX:CompileCommand=dontinline,*VisibilityTest.run
-XX:CompileCommand=compileonly,*VisibilityTest.run
-XX:+PrintAssembly
#########################################################class字节码及汇编代码输出#########################################################