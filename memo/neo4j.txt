cypher：描述性的类sql的图操作语言。（没有join，cypher语言中任何语法都可以有return）

下载算法包：
从https://github.com/neo4j-contrib/neo4j-graph-algorithms/releases下载相应版本jar包（例：graph-algorithms-algo-3.5.4.0），放到　　
\plugins 目录下面
配置文件：
在 C:\Users\Administrator.Neo4jDesktop\neo4jDatabases\database-数据库ID\installation-3.5.6/conf/neo4j.conf 配置文件中添加 　　
　　dbms.security.procedures.unrestricted=algo.*

############################################################Create、match、merge############################################################
=====> 创建节点及添加相应的属性
create (grandpa:Person {id:1,name:"王始初",age:68,gender:"male"}) //标签前面的"王始初"是别名，无法通过别名查询，
create (grandma:Person {id:2,name:"郑月娥",age:65,gender:"female"}) 
create (father:Person {id:3,name:"王才仁",age:36,gender:"male"})
create (mother:Person {id:4,name:"赵雅芝",age:32,gender:"female"})
create (Son:Person {id:5,name:"王子",age:25,gender:"male"})
create (daughter:Person {id:6,name:"王燕飞",age:18,gender:"female"})

也可以一次创建：
create (grandpa:Person {id:1,name:"王始初",age:68,gender:"male"}),
       (grandma:Person {id:2,name:"郑月娥",age:65,gender:"female"}), 
       (father:Person {id:3,name:"王才仁",age:36,gender:"male"}),
       (mother:Person {id:4,name:"赵雅芝",age:32,gender:"female"}),
       (son:Person {id:5,name:"王子",age:25,gender:"male"}),
       (daughter:Person {id:6,name:"王燕飞",age:18,gender:"female"})

=====> 创建多个标签的节点 
create (n:Card:Finance {type:"Visa",quota:50000,ValidPeriod:10,conditions:"白领"})

=====> 创建节点之间的关系
match (s:Person {name:"王始初"}), (d:Person {name:"郑月娥"})
create ((s)-[r:wife]->(d))
match (s:Person {name:"郑月娥"}), (d:Person {name:"王始初"})
create ((s)-[r:husband]->(d))

match (s:Person {name:"王才仁"}), (d:Person {name:"赵雅芝"})
create ((s)-[r:wife]->(d))
match (s:Person {name:"赵雅芝"}), (d:Person {name:"王才仁"})
create ((s)-[r:husband]->(d))

match (s:Person {name:"王子"}), (d:Person {name:"王燕飞"})
create ((s)-[r:sister]->(d))
match (s:Person {name:"王燕飞"}), (d:Person {name:"王子"})
create ((s)-[r:brothers]->(d))

match (s:Person {name:"王始初"}), (d:Person {name:"王才仁"})
create ((s)-[r:son]->(d))
match (s:Person {name:"王始初"}), (d:Person {name:"赵雅芝"})
create ((s)-[r:DaughterInLaw]->(d))

match (s:Person {name:"郑月娥"}), (d:Person {name:"王才仁"})
create ((s)-[r:son]->(d))
match (s:Person {name:"郑月娥"}), (d:Person {name:"赵雅芝"})
create ((s)-[r:DaughterInLaw]->(d))

match (s:Person {name:"王才仁"}), (d:Person {name:"王始初"})
create ((s)-[r:father]->(d))
match (s:Person {name:"王才仁"}), (d:Person {name:"郑月娥"})
create ((s)-[r:mother]->(d))

match (s:Person {name:"赵雅芝"}), (d:Person {name:"王始初"})
create ((s)-[r:FatherInLaw]->(d))
match (s:Person {name:"赵雅芝"}), (d:Person {name:"郑月娥"})
create ((s)-[r:MotherInLaw]->(d))

match (s:Person {name:"王才仁"}), (d:Person {name:"王子"})
create ((s)-[r:son]->(d))
match (s:Person {name:"王才仁"}), (d:Person {name:"王燕飞"})
create ((s)-[r:daughter]->(d))

match (s:Person {name:"赵雅芝"}), (d:Person {name:"王子"})
create ((s)-[r:son]->(d))
match (s:Person {name:"赵雅芝"}), (d:Person {name:"王燕飞"})
create ((s)-[r:daughter]->(d))

=====> 在创建节点的同时建立关系，由于在一个会话中，所以后面建立的语句可以使用前面创建节点时用的别名
create (meimei:Person {name:"美眉"}),(gege:Person {name:"哥哥"}),(meimei)-[:husband]->(gege)
如果直接create (meimei)-[:husband]->(gege)的时候将会新建出2个节点和1个关系，并且新创建的节点和关系没有任何属性，只有系统默认分配的id

=====> 通过merge给节点之间添加关系
直接使用merge：如果相同标签及属性的关系不存在，就会新建节点、属性及关系；如果存在的话就相当于查询、检索出相应的节点及属性
merge (m:Person {name:"美眉"})-[r:husband]->(g:Person {name:"哥哥"})
merge (g:Person {name:"哥哥"})-[r:wife]->(m:Person {name:"美眉"}) 

如果想要在原来的节点中修改关系则需要通过match先将符合条件的节点查出来后再merge
match (m:Person {name:"美眉"}) , (g:Person {name:"哥哥"})
merge (g)-[r:wife]->(m)

=====> CREATE和MERGE的区别
CREATE会创建重复的节点；
MERGE会检查节点是否已存在，如果是，那么它不会创建。
例如1:执行merge (n:Person {name:"李4"})
则会去检查是否存在属性:name="李4"，标签为Person的节点(必须完全属性、标签都完全一致)，如果有的话不创建
当在整个模式上使用merge时，要么是整个模式匹配到，要么是整个模式被创建。merge不能部分地应用于模式，如果希望部分匹配，可将模式拆分为多个merge语句
例如2:执行merge (n:Person {name:"李小小小1"})-[r:GreatGrandfather]->(m:Person {name:"李4"})
则会去检查是否存在属性:name="李小小小1"，标签为Person的节点1,属性:name="李4"，标签为Person的节点2,并且有节点1到节点2有GreatGrandfather关系，否则就会创建merge命令中所有的节点，属性，关系。即使存在节点1和节点2但是关系不存在同样视为不存在，然后将同样的节点1和节点2以及关系创建出来。
例如3:如果oliver和reiner节点存在，而他们之间的关系:friends不存在的时候:
使用下述方式会将节点：oliver、reiner以及关系都创建出来
merge (oliver:Person {name:"Oliver Stone"}) -[r:friends]-> (reiner:Person {name:"Rob Reiner"})
使用下述方式则只会创建关系
merge (oliver:Person {name:"Oliver Stone"}) merge (reiner:Person {name:"Rob Reiner"}) merge (oliver)-[r:friends]->(reiner) return r
############################################################Create、match、merge############################################################

############################################################OPTINAL MATCH############################################################
OPTINAL MATCH语句用于搜索模式中描述的匹配项，对于找不到的项用null代替。
如果某个关系是可选的，可使用OPTINAL MATCH。这很类似SQL中outer join的工作方式。如果关系存在就返回，否则在相应的地方返回null。
############################################################OPTINAL MATCH############################################################

#########################################################set、delete、remove#########################################################
=====> 通过set更新节点的属性
match (n:Person {name:"赵雅芝"}) set n.id=4 return n.name,n.id
属性是写数据的时候自动创建，无schema特性，

=====> delete、remove主要区别
delete操作用于删除节点和relation
remove操作用于删除节点中的标签和属性
两个命令都应该与match一起使用

=====> remove属性
先创建：
create (n:Card {type:"万事达",quota:100000,ValidPeriod:10,conditions:"学生"})
更新：
match (n:Card {type:"万事达"}) set n.name='京东联名卡' return n.name
再remove：
match (n:Card {name:"京东联名卡"}) remove n.conditions return n

=====> remove标签（当该标签没有被任何节点引用时，系统会自动删除该标签）
先添加标签：
match (n:Card {name:"京东联名卡"}) set n:Finance return n
再remove标签：
match (n:Card {name:"京东联名卡"}) remove n:Finance

=====> delete关系
先创建节点：
create (a:Teacher {name:"张老师",age:48}),(b:Student {name:"李学生",age:12}),(c:Student {name:"王学生",age:11})
再创建关系：
match (t:Teacher),(l:Student),(w:Student) where t.name="张老师" and w.name="王学生" and l.name="李学生"
merge (t)-[:teach]->(l)
merge (t)-[:teach]->(w)
match (t:Teacher),(l:Student),(w:Student) where t.name="张老师" and w.name="王学生" and l.name="李学生"
merge (l)-[:study]->(t)
merge (w)-[:study]->(t)
删除关系（指定条件：老师姓名、学生姓名）：
match (s:Teacher)-[r:teach]->(d:Student) where s.name="张老师" and d.name="王学生" delete r
删除关系（没有指定条件：将所有的teach关系全部删除掉）：
match (s)-[r:teach]->(d) delete r

注意：如果使用下述语句的话，会将整个库里面存在关系的节点及标签和它们之间的关系全部删除掉（不管这个关系的方向）
match p=()-[]-() delete p
match ()-[r]-() delete r

=====> delete节点
先创建节点：
create (a:Teacher {name:"张老师",age:48}),(b:Student {name:"李学生",age:12}),(c:Student {name:"王学生",age:11})
再删除：
match (n:Teacher) delete n
match (n:Student) delete n
删除所有标签为Teacher的节点，删除从Teacher标签的节点到Student标签的节点的关系中所有的teach关系以及删除所有标签为Student的节点：
match (s:Teacher)-[r:teach]->(d:Student) delete s,r,d
删除所有存在关系的标签为Person的节点以及他们之间的关系（不管这个关系的方向）
match p=(:Person)-[]-(:Person) delete p
match (s:Person)-[r]-(d:Person) delete s,r,d
删除所有标签为Person的节点
match p=(:Person) delete p
match (n:Person) delete n
删除所有关系（不管这个关系的方向）
match p=()-[]-() delete p
match ()-[r]-() delete r
删除所有节点（所有标签的节点）
match p=() delete p
match (n) delete n

注意：如果被删除的节点和其他节点之间还存在关系的话将无法删除

=====> 通过真正的id删除关系和节点
match ()-[r]-() where id(r)=15 delete r
match (n) where id(n)=6 delete n
#########################################################set、delete、remove#########################################################

#########################################################排序、limit、skip#########################################################
=====> order by
match (n:Person) return n order by n.id desc
=====> limit 显示多少行，最前面开始
match (n:Person) return n limit 2
=====> skip：跳过前面的n行
match (n:Person) return n order by n.id desc skip 2
=====> union：（将多段match的return结果组合成一个结果集，自动去重）
match (n:Person) where n.id = 1 return n union match (n:Person) where n.name="王始初" return n
=====> union all
match (n:Person) where n.id = 1 return n union all match (n:Person) where n.name="王始初" return n
=====> is null、is not null
match (n:Person) where n.id is null return n
match (n:Person) where n.id is not null return n
=====> in
match (n:Person) where n.id in [1,3,5] return n
#########################################################排序、limit、skip#########################################################

#########################################################exists属性存在性检查#########################################################
使用exists()只能检查节点或者关系的某个属性是否存在。
例如：查询存在age属性的节点和边；
match (n) where exists(n.age) return n.name
#########################################################exists属性存在性检查#########################################################

#########################################################正则表达式#########################################################
Cypher支持正则表达式过滤。正则表达式的语法继承自Java正则表达式。它支持字符串如何匹配标记，包括不区分大小写(?!)，多行(?m)和单行(?s)。标记放在正则表达式的开头，例如MATCH (n) WHERE n.name =~ '(?!)Lon.*' RETURN n 将返回名字为'London'和'LonDoN'的节点
#########################################################正则表达式#########################################################

#############################################################Aggregation#############################################################
=====> count
Cypher支持使用聚合(Aggregation)来计算聚在一起的数据，类似SQL中的GroupBy。聚合函数有多个输入值，然后基于它们计算出一个聚合值。例如，avg函数计算多个数值的平均值，min函数用于找到一组值中最小的那个。
聚合可以在匹配到的子图上进行计算。非聚合的表达式将值聚集起来，然后放入聚合函数。
例如，下面的返回语句：
RETURN n, count(*)
这里有两个表达式：n和count(*)。前者n不是聚合函数，是一个分组键。后者count()是一个聚合函数。因此，根据不同的分组键(GroupingKey)，匹配的子图将被分为不同的组。聚合函数将运行在这些组上来计算聚合值。
Cypher的聚合和别的语言不一样，比如在SQL中聚合是通过group by实现的，而在cypher中是通过聚合函数默认聚合的。
看一个例子：
match(n:Person) return n.name, count(n.name)
表面上看没有做任何聚合操作，实际上，因为使用了聚合函数count，因此会自动根据前面字段做聚合操作，上述语句的意思是统计每个名字的使用次数（使用相同名字的个数）。

=====> collect
将查询的结果显示到一行记录中，以一个字符串数组的形式展示（看起来很方便）
例如：查询所有电影的名字，并显示到一个数组中；
MATCH (n:Movie) RETURN collect(n.title)
#############################################################Aggregation#############################################################

#############################################################FOREACH#############################################################
用于更新列表和路径中的数据
foreach 括号中的变量是与外部分开的，变量不能用于语句之外
foreach 括号里可以执行任何更新命令，create / create unique / delete / foreach
// 将设置路径上所有的节点的flag属性为true
match p = (begin) -[*]-> (end)
where begin.name='David' and end.name = 'Mike'
foreach (n in nodes(p) | set n.flag = true )
// 将设置路径上所有的关系的own属性为true
match p = (begin) -[*]-> (end)
where begin.name='David' and end.name = 'Mike'
foreach (n in relationships(p) | set n.own = true )
// 将列表中的人全部加为朋友
match (a:Person {name:"Jim"}) 
foreach ( name in ['Allen','Bruce','Charles','George']  |  create (a) -[:friends]-> (:Person{name:name}) )
#############################################################FOREACH#############################################################

#########################################################With#########################################################
with语句将分段的查询部分连接在一起，查询结果从一部分以管道形式传递给另外一部分作为开始点。（可以理解为return）
使用with可以将结果传递到后续查询之前对结果进行操作。操作可以是改变结果的形式或者数量。with的一个常见用法就是限制传递给其他match语句的结果数。通过结合OrderBy和Limit，可获取排在前面的X个结果。
另一个用法就是在聚合值上过滤。with用于在where断言中引入聚合。这些聚合表达式创建了新的结果绑定字段。with也能像return一样对结果使用别名作为绑定名。with还可以用于将图的读语句和更新语句分开，查询中的每一部分要么只是读取，要么都是写入。当写部分的语句是基于读语句的结果时，这两者之间的转换必须使用with。
1)过滤聚合函数结果：聚合的结果必须要通过with语句传递才能进行过滤
MATCH (david { name: "David" })--(otherPerson)-->()  
WITH otherPerson, count(*) AS foaf
WHERE foaf > 1
RETURN otherPerson
代码块解释：（1）match与”David”关联（无向）的otherPerson；（2）然后return出度大于1的otherPerson。
2)在collect前对结果排序：可以在将结果传递给collect函数之前对结果进行排序，这样就可以返回排过序的列表。
MATCH (n)
WITH n
ORDER BY n.name DESC LIMIT 3
RETURN collect(n.name)
代码块解释：（1）match所有人；（2）对所有人的name进行降序排列，并取top-3；（3）返回top-3的name并组成collect：返回结果为：[“Emil”,”David”,”Ceasar”]
3)在路径搜索的时候限制分支数：可以限制匹配路径的数量，然后以这些路径为基础再做任何类似的有限制条件的搜索。
MATCH (n { name: "Anders" })--(m)
WITH m
ORDER BY m.name DESC LIMIT 1
MATCH (m)--(o)
RETURN o.name
代码块解释：（1）从”Anders”出发，找到关联（无向）的所有人的集合m；（2）对集合m按照name降序排列，取top-1；（3）返回与top-1关联（无向）的所有人的name。
#########################################################With#########################################################

#########################################################id、index、属性唯一性约束#########################################################
=====> 每个节点或relation都有一个系统分配的id，从0开始递增，全局唯一；可以通过函数id(node/relation)获取id值

=====> Relation具有方向性，Create节点之间关系时，必须指定方向，否则会报错；但是查询的时候可以不指定方向

=====> 索引index
create index on :标签(属性)
drop index on :标签(属性)
1、不需要给索引起名字
2、通过该字段的查询都走索引（即使索引套函数也会走索引）

=====> 执行计划：explain
用法：explain match 语句...

=====> 属性唯一性约束：CONSTRAINT
create constraint on (n:Person) assert n.id is unique
drop constraint on (n:Person) assert n.id is unique
#########################################################id、index、属性唯一性约束#########################################################

###################################################常用函数、shortestPath、allShortestPaths###################################################
=====> 常用函数
功能         描述
toUpper      字母小写转大写 
toLower      字母大写转小写
SUBSTRING    获取子字符串
REPLACE      替换一个字符串的子字符串     

聚集函数     描述
COUNT        返回符合条件的记录数
MAX          返回所有符合条件的字段中的最大值
MIN          返回所有符合条件的字段中的最小值
SUM          返回所有符合条件的字段的和
AVG          返回所有符合条件的字段的平均值

match (n:Person) where n.id > 3 return toUpper(n.gender)
match (n:Person) where n.id > 3 return replace(n.gender,'male','男性')
match (n:Person) where n.id > 3 return avg(n.age)

=====> 二度关系查询
match (s:Person {name:"王子"})-[:father]->()-[:father]->(d) return d.name

=====> shortestPath
MATCH (s:Person { name: '王子' }),(d:Person { name: '王始初' }), p = shortestPath((s)-[*..2]-(d)) RETURN p

=====> allShortestPaths
MATCH (s:Person { name: '王子' }),(d:Person { name: '王始初' }), p = allShortestPaths((s)-[*..2]-(d)) RETURN p

=====> 可变长模式匹配：Variable-length pattern matching
指定长度描述关系，
(a)-[*2]->(b) //描述了一个路径（长度为2的路径）中包含三个节点和两个关系，相当于(a)-->()-->(b)
例：
match p=(s)-[*2]-(d) return p
match (s)-[*2]-(d) return s,d
match p=(s)-->(c)-->(d) return p
match (s)--(c)--(d) return s,c,d
指定长度范围：这种关系模式称为“可变长度”
(a)-[*3..5]->(b) //最小长度为3，最大长度为5：包含了4个节点和3个关系、5个节点和4个关系或6个节点和5个关系的路径
任一个界限都可以省略。
例如，要描述长度为3或更大的路径：
(a)-[*3..]->(b)
描述长度为5或更小的路径：
(a)-[*..5]->(b)
省略两个边界表示任何长度的路径：
(a)-[*]->(b)
描述相邻1个或2个knows关系的路径
(a)-[:knows*1..2]-(b)
###################################################常用函数、shortestPath、allShortestPaths###################################################

​
###############################################From RDBMS to Neo4j, using a classic data set.###############################################

=====> Write Code
:play write-code

=====> Load records
LOAD CSV WITH HEADERS FROM "http://data.neo4j.com/northwind/products.csv" AS row
CREATE (n:Product)
SET n = row,
n.unitPrice = toFloat(row.unitPrice),
n.unitsInStock = toInteger(row.unitsInStock), n.unitsOnOrder = toInteger(row.unitsOnOrder),
n.reorderLevel = toInteger(row.reorderLevel), n.discontinued = (row.discontinued <> "0")

LOAD CSV WITH HEADERS FROM "http://data.neo4j.com/northwind/categories.csv" AS row
CREATE (n:Category)
SET n = row

LOAD CSV WITH HEADERS FROM "http://data.neo4j.com/northwind/suppliers.csv" AS row
CREATE (n:Supplier)
SET n = row

=====> Create indexes
CREATE INDEX ON :Product(productID)
CREATE INDEX ON :Category(categoryID)
CREATE INDEX ON :Supplier(supplierID)

=====> Create data relationships
MATCH (p:Product),(c:Category)
WHERE p.categoryID = c.categoryID
CREATE (p)-[:PART_OF]->(c)

MATCH (p:Product),(s:Supplier)
WHERE p.supplierID = s.supplierID
CREATE (s)-[:SUPPLIES]->(p)

=====> Query using patterns
MATCH (s:Supplier)-->(:Product)-->(c:Category)
RETURN s.companyName as Company, collect(distinct c.categoryName) as Categories
//List the product categories provided by each supplier.
//即对同一companyName里面的categoryName进行去重，而不是对所有的categoryName去重
MATCH (c:Category {categoryName:"Produce"})<--(:Product)<--(s:Supplier)
RETURN DISTINCT s.companyName as ProduceSuppliers
//Find the produce suppliers.
//即categoryName为Produce的商品是由哪些供应商供应的

=====> Load and index records
LOAD CSV WITH HEADERS FROM "http://data.neo4j.com/northwind/customers.csv" AS row
CREATE (n:Customer)
SET n = row

LOAD CSV WITH HEADERS FROM "http://data.neo4j.com/northwind/orders.csv" AS row
CREATE (n:Order)
SET n = row

CREATE INDEX ON :Customer(customerID)

CREATE INDEX ON :Order(orderID)

Load and index records

LOAD CSV WITH HEADERS FROM "http://data.neo4j.com/northwind/customers.csv" AS row
CREATE (n:Customer)
SET n = row

LOAD CSV WITH HEADERS FROM "http://data.neo4j.com/northwind/orders.csv" AS row
CREATE (n:Order)
SET n = row

CREATE INDEX ON :Customer(customerID)

CREATE INDEX ON :Order(orderID)

=====> Create data relationships
MATCH (c:Customer),(o:Order)
WHERE c.customerID = o.customerID
CREATE (c)-[:PURCHASED]->(o)

=====> Load and index records
LOAD CSV WITH HEADERS FROM "http://data.neo4j.com/northwind/order-details.csv" AS row
MATCH (p:Product), (o:Order)
WHERE p.productID = row.productID AND o.orderID = row.orderID
CREATE (o)-[details:ORDERS]->(p)
SET details = row,
details.quantity = toInteger(row.quantity)

=====> Query using patterns
MATCH (cust:Customer)-[:PURCHASED]->(:Order)-[o:ORDERS]->(p:Product),
  (p)-[:PART_OF]->(c:Category {categoryName:"Produce"})
RETURN DISTINCT cust.contactName as CustomerName, SUM(o.quantity) AS TotalProductsPurchased

###############################################From RDBMS to Neo4j, using a classic data set.###############################################

###############################################图数据库neo4j存储数据结构分析###############################################
=====> 存储的数据结构的源码目录
neo4j-4.2\community\record-storage-engine\src\main\java\org\neo4j\kernel\impl\store\format\standard

=====> neo4j存储的数据结构
在neo4j中，点、关系和属性等图的组成元素都是基于neo4j内部维护的ID进行访问的。而且可以认为这些元素的定长存储的。这样做的好处在于，知道了某点/关系/属性的ID，就能直接算出该ID在对应文件中的偏移位置，直接进行访问。也就是说在图的遍历过程中不需要基于索引扫描，直奔目的地即可。

=====> 点
点结构为定长15byte，并且仅保存该点的第一个关系的ID和该点的第一个属性的ID
// in_use(byte)+next_rel_id(int)+next_prop_id(int)+labels(5)+extra(byte)
public static final int RECORD_SIZE = 15;
第一个byte的第一个bit存inUse(节点是否在使用中)，后七个bit存属性和关系id的高位信息
// [    ,   x] in use bit
// [    ,xxx ] higher bits for rel id
// [xxxx,    ] higher bits for prop id
接下来用一个Int(4个byte)保存第一个关系ID的低位，加上第一个byte的三个位表示的关系ID的高位组合成关系ID（就是说neo4j中关系ID用35位表示）
接下来用一个Int(4个byte)保存第一个属性ID的低位，加上第一个byte的四个位表示的属性ID的高位组合成关系ID（就是说neo4j中属性ID用36位表示）
接下来用一个Int(4个byte)存lsbLabels
接下来用一个byte存hsbLabels，跟4组成5个byte的label
最后一个byte保留字段extra，存记录是否为dense，dense的意思是是否为一个supernode

=====> 边
边结构为定长34byte，
第一个byte的第一个bit存inUse(关系是否在使用中)，后七个bit存关系起点和第一个属性的高位信息
一个Int存该关系的起点
一个Int存该关系的终点
一个Int存关系的类型，以及关系的终点、关系的起点的前一个和后一个关系、关系的终点的前一个和后一个关系的高位信息，如下所示：
// [ xxx,    ][    ,    ][    ,    ][    ,    ] second node high order bits,     0x70000000
// [    ,xxx ][    ,    ][    ,    ][    ,    ] first prev rel high order bits,  0xE000000
// [    ,   x][xx  ,    ][    ,    ][    ,    ] first next rel high order bits,  0x1C00000
// [    ,    ][  xx,x   ][    ,    ][    ,    ] second prev rel high order bits, 0x380000
// [    ,    ][    , xxx][    ,    ][    ,    ] second next rel high order bits, 0x70000
// [    ,    ][    ,    ][xxxx,xxxx][xxxx,xxxx] type
一个Int存该关系的起点的前一个关系
一个Int存该关系的起点的下一个关系
一个Int存该关系的终点的前一个关系
一个Int存该关系的终点的下一个关系
一个Int存该关系的第一个属性
一个Byte存该关系是不是起点和终点的第一个关系，如下所示：
// [    ,   x] 1:st in start node chain,  0x1
// [    ,  x ] 1:st in end node chain,   0x2
边保存了其对应的起点和终点的ID，可以看到点的ID跟边一样，也是35位；这算是最基本的字段；
除此之外，还保持了起点对应的前一个和后一个关系，终点对应的前一个和后一个关系。这看起来就有点特别了，也就是说，对一个点的所有边的遍历，不是由点而是由其边掌控的；
由于起点和终点的关系都保存了，所以无论从起点开始遍历还是从终点开始都能够顺利完成遍历操作；
与点一样，边也仅保存自身的第一个属性；
最后，分别有个标识位来说明该边是否为起点和终点的第一条边。

=====> 属性
属性结构为定长41B。但与点和边不同的是，属性的长度本身是不固定的，一个属性结构不一定能够保存得下，因此还有可能外链到动态存储块上（DynamicRecord），动态存储块又可分为动态数组或动态字符串，动态存储块在此不做详细介绍。
一个Byte存辅助信息，即前后属性结构ID的高位信息（就是说neo4j中属性ID用36位表示）
一个Int存前一个属性
一个Int存下一个属性
默认存4个属性块，每个块一个Long

=====> 图规模
从上面知道，neo4j使用35位保存点和边的ID，用36位保存属性ID。
2^35 = 34,359,738,368
2^36 = 68,719,476,7362
也就是说neo4j最大能够保存34B的点和边，68B个属性。更直观说就是340亿的点和边，680亿个属性。所以，从规模上，neo4j图数据库能够容纳足够大的图。
###############################################图数据库neo4j存储数据结构分析###############################################