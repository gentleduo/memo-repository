#########################################################spring和springmvc父子容器#########################################################
首先了解什么是容器：
java容器：
可以管理对象声明周期，对象间的依赖关系。还可以配置对象名称，属性，产生方式等。不用程序员自己编写程序来管理。
java中常用的容器类有：List、HashMap、HashTable等。
spring容器：
spring有两个核心接口：BeanFactory和ApplicationContext，其中ApplicationContext是BeanFactory的子接口。他们都可代表Spring容器，Spring容器是生成Bean实例的工厂，并且管理容器中的Bean。
Bean是Spring管理的基本单位，在基于Spring的Java EE应用中，所有的组件都被当成Bean处理，包括数据源、hibernate的SessionFactory、事务管理器等。在Spring中，Bean的是一个非常广义的概念，任何的Java对象、Java组件都被当成Bean处理。

ssm框架中spring可以包含多个容器，比如说springmvc容器。在搭建项目的时候我们做了好多的配置：
比如：在springmvc.xml中配置了一个扫描包，扫描controller中的注解。
<context:component-scan base-package="com.gentleduo.controller"></context:component-scan>
<mvc:annotation-driven/>
又比如：在service.xml中配置了扫描包，要扫描service中的注解
<context:component-scan base-package="com.gentleduo.service"></context:component-scan>
那问题就来了，既然spring容器是一个大的容器，那我可不可以，写一个全局扫描包把service/dao/controller都扫描到spring容器中呢？这样会不会更方便一点不用配置那么多的xml文件？针对这个问题，探讨一下：
Spring是一个容器，springmvc也是一个容器。他们两者之间是父子容器关系。springmvc是子容器，包含在spring容器中。在项目中的配置如下：
在web.xml中配置了一个spring容器：用Listener加载初始化srping容器（这是一个大的容器）
<context-param>
	<param-name>contextConfigLocation</param-name>
	<!-- classpath:只会到你的class路径中查找找文件;classpath*:不仅包含class路径，还包括jar文件中(class路径)进行查找。 -->
	<param-value>classpath:applicationContext.xml</param-value>
</context-param>
<listener>
	<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
</listener>
还配了一个springmvc的前端控制器：（这是一个包含在springmvc中的一个容器。而springmvc又包含在spring容器中）
<!-- 配置前端控制器 -->
<servlet>
	<servlet-name>springmvc</servlet-name>
	<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
	<!-- 设置spring配置文件路径 -->
	<!-- 如果不设置初始化参数，那么DispatcherServlet会读取默认路径下的配置文件 -->
	<!-- 默认配置文件路径：/WEB-INF/springmvc-servlet.xml -->
	<init-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>classpath:spring-mvc.xml</param-value>
	</init-param>
	<!-- 指定初始化时机，设置为2，表示Tomcat启动时，它会跟随着启动，DispatcherServlet会跟随着初始化 -->
	<!-- 如果没有指定初始化时机，DispatcherServlet就会在第一次被请求的时候，才会初始化，而且只会被初始化一次(单例模式) -->
	<load-on-startup>2</load-on-startup>
</servlet>
<servlet-mapping>
	<servlet-name>springmvc</servlet-name>
	<!-- url-pattern的设置 -->
	<!-- 不要配置为/*，否则报错 -->
	<!-- 通俗解释：会拦截整个项目中的资源访问，包含JSP和静态资源的访问,对于JS的访问，springmvc提供了默认Handler处理器 -->
	<!-- 但是对于JSP来讲，springmvc没有提供默认的处理器，我们也没有手动编写对应的处理器，此时按照springmvc的处理流程分析得知，它down了 -->
	<url-pattern>/</url-pattern>
</servlet-mapping>
就相当于：service和dao在spring容器中，controller在springmvc容器中。
父子容器约定如下：
1、子容器可以访问父容器中的对象：
也就是service 可以注入到controller中。但反过来，controller就不可以注入到service中。当然，如果controller和service在一个容器中，就可以注入。
2、父容器不可以访问子容器中的对象：
如果我们在spirng中配置一个全局的扫描包，spring容器会把service,controller,dao都扫描放入spring这个大的容器中。这样导致，springmvc中就没有对象了，页面访问找不到对应的controller，就会报404错误。
相反，如果我们在springmvc中写一个扫描包，把service、dao都注入到springmvc中，（也就是把spingmvc.xml中扫描包中的.controller去掉）是没有问题的。因为springmvc也是一个spring容器。
3、我们为什么要用spring加springmvc呢？
当然是为了系统以后的扩张方便。spring可以整合多个框架，这样我们后边如果想再加入一个struts到spring容器里面，也是可以的。
4、我们可不可以把事务配置到controller中？
如果是spirng+springmvc这个架构是不可以，因为事务管理器是在spring中配置的，在父容器中是访问不了springmvc子容器中的controller的。所以不可以
但是如果把所有扫描包都配置到springmvc中，那么在controller是可以配置事务的。
所以结论如下：不可以在service.xml中配置一个全局扫描包来使用。
了解了父子容器，我们在搭建框架的时候，就会很容易的知道，我要配置什么，配置到哪些地方。就会更深一步的了解框架的原理。

#########################################################spring和springmvc父子容器#########################################################

#############################<context:annotation-config/>、<context:component-scan>和<mvc:annotation-driven/>#############################
1、<context:annotation-config/>
如果你想使用@Autowired注解，那么就必须事先在spring容器中声明AutowiredAnnotationBeanPostProcessor的Bean.
如果想使用@Resource ,@PostConstruct,@PreDestroy等注解就必须声明CommonAnnotationBeanPostProcessor的Bean.
如果想使用@PersistenceContext注解，就必须声明PersistenceAnnotationBeanPostProcessor的Bean.
如果想使用 @Required的注解，就必须声明RequiredAnnotationBeanPostProcessor的Bean.
使用<context:annotation- config/>隐式地向Spring容器注册这4个BeanPostProcessor:
即<context:annotation-config/>是用来使上述注解起作用的，也就是说激活已经在application context中注册的bean.
之所以这样说是因为<context:annotation-config/>仅能够在spring容器中已经注册过的bean上面起作用.对于没有在spring容器中注册的bean，它并不能执行任何操作,也就是说如果你并没有spring容器中注册过bean（spring配置文件中配置bean就是注册），那么上述的那些注解并不会在你未注册过的bean中起作用.

2、<context:component-scan>
<context:component-scan>做了<context:annotation-config>要做的事情，还额外支持@Component，@Repository，@Service，@Controller注解.并且<context:component-scan>扫描base-package并且在applicationcontext中注册扫描的beans.
所以配置<context:component-scan>就不需要配置<context:annotation- config/>
<context:component-scan>的扫描顺序：
1)首先根据<context:component-scan>的use-default-filters属性(默认为true)：如果为true则会自动注册对@Component、@ManagedBean、@Named注解的Bean进行扫描，如果不要默认扫描，则设置use-default-filters为false；
2) 然后会通过include-filter/exclude-filter来判断你的Bean类是否是合法的：首先通过exclude-filter进行黑名单过滤，然后通过include-filter 进行白名单过滤，否则默认排除。
例如：在spring-mvc.xml中进行如下配置：
<context:component-scan base-package="com.gentleduo"> 
     <context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/> 
</context:component-scan>
则SpringMVC容器不仅仅扫描并注册了"com.gentleduo"包下带有@Controller注解的Bean，而且还扫描并注册了带有@Component的子注解@Service、@Reposity的Bean。因为use-default-filters默认为true。所以如果不需要默认的，则use-default-filters="false"禁用掉。当进行上面的配置时，SpringMVC容器会把service、dao层的bean重新加载，从而造成新加载的bean覆盖了老的bean，但事务的AOP代理没有配置在spring-mvc.xml配置文件中，造成事务失效。解决办法是：在spring-mvc.xml配置文件中的context:component-scan标签中使用use-default-filters=“false”禁用掉默认的行为。

3、<mvc:annotation-driven/>
主要是用来向工厂中注册了如下几个bean
RequestMappingHandlerMapping
BeanNameUrlHandlerMapping
RequestMappingHandlerAdapter
HttpRequestHandlerAdapter
SimpleControllerHandlerAdapter
ExceptionHandlerExceptionResolver
ResponseStatusExceptionResolver
DefaultHandlerExceptionResolver
主要说明里面的两个，RequestMappingHandlerMapping和RequestMappingHandlerAdapter。
第一个是HandlerMapping的实现类，它会处理@RequestMapping 注解，并将其注册到请求映射表中
第二个是HandlerAdapter的实现类，它是处理请求的适配器，说白了，就是确定调用哪个类的哪个方法，并且构造方法参数，返回值。

BeanNameUrlHandlerMapping与RequestMappingHandlerMapping的区别：
1.前者只依赖@Controller("/baseurl")注解进行识别，后者是依赖Controller和ReqestMapping注解进行识别。
2.前者的类对象是由Servlet接口派生，后者是无派生关系的普通类。
如果通过@Controller("/baseurl")注解，那必须继承HttpServlet，访问URL就是注解里面的url；
而如果通过@Controller()注解，则需要和@ReqestMapping结合才能进行URL识别
@Controller
@RequestMapping("/demo")
public class DemoController {
	@RequestMapping("/findall")
	public String handleList(Model model) {
		logger.info("demo02  handleList");
		List<Demo> list = demoService.findAll();
		model.addAttribute("results", list);
		return "demo";
	}
}

@Controller("/demo_servlet2")
public class Demo2Servlet extends HttpServlet {	
	@PostConstruct  //init-method="init"
	@Override
	public void init() throws ServletException {
		// TODO Auto-generated method stub
		logger.info("Demo2Servlet init start");		
 
		logger.info("Demo2Servlet init end");
	}
	@RequestMapping("/findall")
	public String handleList(Model model) {
		logger.info("demo02  handleList");
		return "demo";
	}
	@Override
	protected void service(HttpServletRequest req, HttpServletResponse response)
			throws ServletException, IOException {
		// TODO Auto-generated method stub
 
		logger.info("Demo2Servlet service start");
 
		response.setContentType(CONTENT_TYPE);
		response.setHeader("Pragma", "No-cache");
		response.setHeader("Cache-Control", "no-cache");
		response.setDateHeader("Expires", 0);
		String result = demoService.getById(1l).getName();
		//Integer.valueOf(result); //测试异常显示页面
		PrintWriter out = response.getWriter();
		out.println("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");
		out.println("<root>\n");
		out.println("<result>" + result + "</result>\n");
		out.println("</root>\n");
 
		out.flush();
		out.close();
		logger.info("Demo2Servlet service end");
	}
	@PreDestroy //destroy-method="destroy"
	@Override
	public void destroy() {
		// TODO Auto-generated method stub
		logger.info("Demo2Servlet destroy start");
 
		logger.info("Demo2Servlet destroy end");
	}
}
<context:component-scan/>标签是告诉Spring 来扫描指定包下的类，并注册被@Component，@Controller，@Service，@Repository等注解标记的组件
（即，项目启动完成前这些被注解的组件就会被实例化bean放入容器上下文中）和注册AutowiredAnnotationBeanPostProcessor、 RequiredAnnotationBeanPostProcessor、 CommonAnnotationBeanPostProcessor以及 PersistenceAnnotationBeanPostProcessor。
而<mvc:annotation-driven/>是告知Spring，我们启用注解驱动，为WEB 应用服务(我们就可以使用该标签注册的几个bean的功能)。然后Spring会自动为我们注册上面说到的几个Bean到工厂中，来处理我们的请求。换句话说，<context
比如请求一个URL，我要知道这个URL匹配哪个controller中的哪个方法。哪个Controller就需要<context:component-scan/>注解，如何匹配，匹配哪个方法就需要<mvc:annotation-driven/>注解。

#############################<context:annotation-config/>、<context:component-scan>和<mvc:annotation-driven/>#############################

##########################################################SpringMVC JSON&POJO转换##########################################################
springmvc中使用jackson的包进行json转换
实现功能：
@RequestBody: 将请求的JSON数据转成POJO对象
@ResponseBody:将返回的POJO对象转换成JSON串
具体配置：
1、springmvc.xml中直接采用<mvc:annotation-driven/> 自动装配Json转换器；或者将MappingJackson2HttpMessageConverter注册到spring容器中；
2、消息转换接口的实现类能够顺利执行，还需要jackson来支持；所以在pom.xml中必须配置：jackson-core、jackson-databind和jackson-annotations
##########################################################SpringMVC JSON&POJO转换##########################################################

##########################################################SpringMVC 中文乱码解决##########################################################
1、post请求乱码
在web.xml加入filter过滤，注意，只能解决浏览器端发送post请求，controller接收中文乱码的情况。
<!-- POST字符编码过滤 -->
<filter>
<description>字符集过滤器</description>
<filter-name>characterEncodingFilter</filter-name>
<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
<init-param>
  <description>字符集编码</description>
  <param-name>encoding</param-name>
  <param-value>UTF-8</param-value>
</init-param>
<init-param>
  <param-name>forceEncoding</param-name>
  <param-value>true</param-value>
</init-param>
</filter>
<filter-mapping>
<filter-name>characterEncodingFilter</filter-name>
<url-pattern>/*</url-pattern>
</filter-mapping>
注意：
1) 在spring-mvc.xml文件中使用<mvc:annotation-driven/>开启注解驱动并且使用@RequestBody将请求的JSON数据转成了POJO对象，不配置filter过滤也不会乱码
2) 在spring-mvc.xml文件中使用<mvc:annotation-driven/>开启注解驱动但是使用@RequestBody将请求的JSON数据以string的方式保存，不配置filter过滤会乱码
个人理解spring在使用注解驱动将json字符串转换为pojo对象的时候考虑了编码，所以不会乱码；而以string的形式接收json数据的话则跳过了注解驱动相当于一个普通的servlet请求，所以需要在web.xml配置filter进行编码过滤

2、springmvc返回中文乱码
1) 解决返回实体类包含中文乱码
返回实体类中的属性包含中文，返回到前端页面上中文显示乱码。采用此方法解决，顺便解决springmvc返回日期格式数据不能正常显示的问题。需要在spring-mvc的配置上解决。
<mvc:annotation-driven>
    <mvc:message-converters>
		<!-- mvc返回非String数据转换json -->
        <bean  class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
            <!-- json日期转换 -->
            <property name="objectMapper">
            	<bean class="com.fasterxml.jackson.databind.ObjectMapper">
            		<property name="dateFormat">
                        <bean class="java.text.SimpleDateFormat">
            				<constructor-arg type="java.lang.String" value="yyyy-MM-dd HH:mm:ss" />
            			</bean>
            		</property>
            	</bean>
            </property>
            <!-- 避免IE执行AJAX时，返回JSON出现下载文件 -->
            <property name="supportedMediaTypes">
            	<list>
            		<value>application/json;charset=UTF-8</value>
            		<value>text/html;charset=UTF-8</value>
            	</list>
            </property>
        </bean>  
    </mvc:message-converters>
</mvc:annotation-driven>
2) 解决返回String类型数据包含中文乱码
修改spring mvc的配置，配置转换器StringHttpMessageConverter
<mvc:annotation-driven>
	<mvc:message-converters register-defaults="true">
		<!-- 解决controller返回String类型数据包含中文乱码 -->
		<bean class="org.springframework.http.converter.StringHttpMessageConverter">
			<property name="supportedMediaTypes" value="text/html;charset=UTF-8" />
		</bean>
	</mvc:message-converters>
</mvc:annotation-driven>
3、get请求乱码
浏览器端发送get请求，controller接收中文乱码，需要在tomcat的server.xml文件中加入添加URIEncoding="utf-8"：
<Connector URIEncoding="UTF-8" connectionTimeout="20000" port="8080" protocol="HTTP/1.1" redirectPort="8443"/>

##########################################################SpringMVC 中文乱码解决##########################################################

##########################################################SpringMVC 请求数据获取##########################################################
https://blog.csdn.net/bingguang1993/article/details/95491259
（1）当Ajax以application/x-www-form-urlencoded格式上传即使用JSON对象，后台需要使用@RequestParam 或者Servlet获取。 
（2） 当Ajax以application/json格式上传即使用JSON字符串，后台需要使用@RquestBody获取。
##########################################################SpringMVC 请求数据获取##########################################################

######################################################SpringMVC访问/WEB-INF/views下的jsp######################################################
1、首先在springmvc-servlet.xml中添加视图解析。
<!-- 视图处理器 -->
  <bean id="viewResolver"
     class="org.springframework.web.servlet.view.InternalResourceViewResolver"> 
    <property name="prefix" value="/WEB-INF/views/"/> 
    <property name="suffix" value=".jsp"/> 
  </bean>
2、确保在/WEB-INF/views/目录下有login.jsp。
3、编写controller
package enht.soft.projectmanagement.controller; 
import org.springframework.stereotype.Controller; 
import org.springframework.web.bind.annotation.RequestMapping; 
import org.springframework.web.bind.annotation.RequestMethod; 
/** 
 * Created by Administrator on 2016-09-29. 
 */
@Controller
@RequestMapping(value = "/web", method = {RequestMethod.GET, RequestMethod.POST}) 
public class URLController { 
  @RequestMapping(value = "/login") 
  public String login() { 
    return "login"; 
  } 
}
4、在地址栏中访问http://localhost/XXXX/web/login直接就能够跳转到对应的login.jsp页面了。
######################################################SpringMVC访问/WEB-INF/views下的jsp######################################################
